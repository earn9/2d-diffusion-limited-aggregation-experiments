!function(s){var e={};function r(o){if(e[o])return e[o].exports;var l=e[o]={i:o,l:!1,exports:{}};return s[o].call(l.exports,l,l.exports,r),l.l=!0,l.exports}r.m=s,r.c=e,r.d=function(s,e,o){r.o(s,e)||Object.defineProperty(s,e,{enumerable:!0,get:o})},r.r=function(s){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},r.t=function(s,e){if(1&e&&(s=r(s)),8&e)return s;if(4&e&&"object"==typeof s&&s&&s.__esModule)return s;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:s}),2&e&&"string"!=typeof s)for(var l in s)r.d(o,l,function(e){return s[e]}.bind(null,l));return o},r.n=function(s){var e=s&&s.__esModule?function(){return s.default}:function(){return s};return r.d(e,"a",e),e},r.o=function(s,e){return Object.prototype.hasOwnProperty.call(s,e)},r.p="",r(r.s=11)}([function(s,e,r){(function(r){var o,l,c;l=[],void 0===(c="function"==typeof(o=function(){"use strict";function e(s,e,r){var o=new XMLHttpRequest;o.open("GET",s),o.responseType="blob",o.onload=function(){u(o.response,e,r)},o.onerror=function(){console.error("could not download file")},o.send()}function o(s){var e=new XMLHttpRequest;return e.open("HEAD",s,!1),e.send(),200<=e.status&&299>=e.status}function l(s){try{s.dispatchEvent(new MouseEvent("click"))}catch(r){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),s.dispatchEvent(e)}}var c="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof r&&r.global===r?r:void 0,u=c.saveAs||("object"!=typeof window||window!==c?function(){}:"download"in HTMLAnchorElement.prototype?function(s,r,u){var n=c.URL||c.webkitURL,y=document.createElement("a");r=r||s.name||"download",y.download=r,y.rel="noopener","string"==typeof s?(y.href=s,y.origin===location.origin?l(y):o(y.href)?e(s,r,u):l(y,y.target="_blank")):(y.href=n.createObjectURL(s),setTimeout(function(){n.revokeObjectURL(y.href)},4e4),setTimeout(function(){l(y)},0))}:"msSaveOrOpenBlob"in navigator?function(s,r,c){if(r=r||s.name||"download","string"!=typeof s)navigator.msSaveOrOpenBlob(function(s,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(s.type)?new Blob(["\ufeff",s],{type:s.type}):s}(s,c),r);else if(o(s))e(s,r,c);else{var u=document.createElement("a");u.href=s,u.target="_blank",setTimeout(function(){l(u)})}}:function(s,r,o,l){if((l=l||open("","_blank"))&&(l.document.title=l.document.body.innerText="downloading..."),"string"==typeof s)return e(s,r,o);var u="application/octet-stream"===s.type,n=/constructor/i.test(c.HTMLElement)||c.safari,y=/CriOS\/[\d]+/.test(navigator.userAgent);if((y||u&&n)&&"object"==typeof FileReader){var g=new FileReader;g.onloadend=function(){var s=g.result;s=y?s:s.replace(/^data:[^;]*;/,"data:attachment/file;"),l?l.location.href=s:location=s,l=null},g.readAsDataURL(s)}else{var f=c.URL||c.webkitURL,d=f.createObjectURL(s);l?l.location=d:location.href=d,l=null,setTimeout(function(){f.revokeObjectURL(d)},4e4)}});c.saveAs=u.saveAs=u,s.exports=u})?o.apply(e,l):o)||(s.exports=c)}).call(this,r(2))},function(s,e,r){"use strict";var o={CircleDiameter:5,InitialClusterType:"Random",WalkerSource:"Random",MaxWalkers:5e3,EdgeMargin:0,PruneOldWalkers:!1,MaxAge:30,ReplenishWalkers:!1,PruneDistantWalkers:!1,MaxWanderDistance:20,VaryDiameterByDistance:!1,VaryDiameterRandomly:!1,ShowClusters:!0,ShowWalkers:!0,ShowShapes:!0,BiasTowards:"",BiasForce:1,UsePerWalkerBias:!0,UseFrame:!0,FrameSize:900,CaptureLines:!0,RenderMode:"Shapes",UseStroke:!1,UseColors:!1,BackgroundColor:{h:230,s:20,b:40},WalkerColor:{h:200,s:30,b:44},ClusterColor:{h:30,s:70,b:80},ShapeColor:{h:100,s:50,b:80},LineColor:{h:10,s:70,b:100},FrameColor:{h:0,s:100,b:100}};const l=[];class c{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return l.length?l.pop():new c}static releaseBranch(s){l.push(s)}static sortBranches(s,e){return s.sort>e.sort?-1:1}}class u{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(s,e=!1){if(!e){const e=s._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");s._bvh=this,this._bodies.push(s)}const r=s._polygon,o=s.x,l=s.y;r&&(s._dirty_coords||s.x!==s._x||s.y!==s._y||s.angle!==s._angle||s.scale_x!==s._scale_x||s.scale_y!==s._scale_y)&&s._calculateCoords();const u=s._bvh_padding,n=r?0:s.radius*s.scale,y=(r?s._min_x:o-n)-u,g=(r?s._min_y:l-n)-u,f=(r?s._max_x:o+n)+u,d=(r?s._max_y:l+n)+u;s._bvh_min_x=y,s._bvh_min_y=g,s._bvh_max_x=f,s._bvh_max_y=d;let w=this._hierarchy,v=0;if(w)for(;;){if(!w._bvh_branch){const e=w._bvh_parent,r=w._bvh_min_x,o=w._bvh_min_y,l=w._bvh_max_x,u=w._bvh_max_y,n=w._bvh_parent=s._bvh_parent=c.getBranch();n._bvh_parent=e,n._bvh_left=w,n._bvh_right=s,n._bvh_sort=v++,n._bvh_min_x=y<r?y:r,n._bvh_min_y=g<o?g:o,n._bvh_max_x=f>l?f:l,n._bvh_max_y=d>u?d:u,e?e._bvh_left===w?e._bvh_left=n:e._bvh_right=n:this._hierarchy=n;break}{const s=w._bvh_left,e=s._bvh_min_y,r=s._bvh_max_x,o=s._bvh_max_y,l=y<s._bvh_min_x?y:s._bvh_min_x,c=g<e?g:e,u=f>r?f:r,n=d>o?d:o,T=(u-l)*(n-c)-(r-s._bvh_min_x)*(o-e),b=w._bvh_right,O=b._bvh_min_x,m=b._bvh_min_y,p=b._bvh_max_x,k=b._bvh_max_y,C=y<O?y:O,E=g<m?g:m,x=f>p?f:p,M=d>k?d:k,R=(x-C)*(M-E)-(p-O)*(k-m);w._bvh_sort=v++,w._bvh_min_x=l<C?l:C,w._bvh_min_y=c<E?c:E,w._bvh_max_x=u>x?u:x,w._bvh_max_y=n>M?n:M,w=T<=R?s:b}}else this._hierarchy=s}remove(s,e=!1){if(!e){const e=s._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");s._bvh=null,this._bodies.splice(this._bodies.indexOf(s),1)}if(this._hierarchy===s)return void(this._hierarchy=null);const r=s._bvh_parent,o=r._bvh_parent,l=r._bvh_left,u=l===s?r._bvh_right:l;if(u._bvh_parent=o,u._bvh_branch&&(u._bvh_sort=r._bvh_sort),o){o._bvh_left===r?o._bvh_left=u:o._bvh_right=u;let s=o;for(;s;){const e=s._bvh_left,r=e._bvh_min_x,o=e._bvh_min_y,l=e._bvh_max_x,c=e._bvh_max_y,u=s._bvh_right,n=u._bvh_min_x,y=u._bvh_min_y,g=u._bvh_max_x,f=u._bvh_max_y;s._bvh_min_x=r<n?r:n,s._bvh_min_y=o<y?o:y,s._bvh_max_x=l>g?l:g,s._bvh_max_y=c>f?c:f,s=s._bvh_parent}}else this._hierarchy=u;c.releaseBranch(r)}update(){const s=this._bodies,e=s.length;for(let r=0;r<e;++r){const e=s[r];let o=!1;if(o||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,o=!0),!o){const s=e._polygon;s&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const r=e.x,l=e.y,c=s?0:e.radius*e.scale,u=s?e._min_x:r-c,n=s?e._min_y:l-c,y=s?e._max_x:r+c,g=s?e._max_y:l+c;o=u<e._bvh_min_x||n<e._bvh_min_y||y>e._bvh_max_x||g>e._bvh_max_y}o&&(this.remove(e,!0),this.insert(e,!0))}}potentials(s){const e=[],r=s._bvh_min_x,o=s._bvh_min_y,l=s._bvh_max_x,c=s._bvh_max_y;let u=this._hierarchy,n=!0;if(!u||!u._bvh_branch)return e;for(;u;){if(n){n=!1;let s=u._bvh_branch?u._bvh_left:null;for(;s&&s._bvh_max_x>=r&&s._bvh_max_y>=o&&s._bvh_min_x<=l&&s._bvh_min_y<=c;)s=(u=s)._bvh_branch?u._bvh_left:null}const y=u._bvh_branch,g=y?u._bvh_right:null;if(g&&g._bvh_max_x>r&&g._bvh_max_y>o&&g._bvh_min_x<l&&g._bvh_min_y<c)u=g,n=!0;else{y||u===s||e.push(u);let r=u._bvh_parent;if(!r)break;for(;r&&r._bvh_right===u;)r=(u=r)._bvh_parent;u=r}}return e}draw(s){const e=this._bodies,r=e.length;for(let o=0;o<r;++o)e[o].draw(s)}drawBVH(s){let e=this._hierarchy,r=!0;for(;e;){if(r){r=!1;let s=e._bvh_branch?e._bvh_left:null;for(;s;)s=(e=s)._bvh_branch?e._bvh_left:null}const o=e._bvh_branch,l=e._bvh_min_x,c=e._bvh_min_y,u=e._bvh_max_x,n=e._bvh_max_y,y=o?e._bvh_right:null;if(s.moveTo(l,c),s.lineTo(u,c),s.lineTo(u,n),s.lineTo(l,n),s.lineTo(l,c),y)e=y,r=!0;else{let s=e._bvh_parent;if(!s)break;for(;s&&s._bvh_right===e;)s=(e=s)._bvh_parent;e=s}}}}class n{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function y(s,e,r=null,o=!0){const l=s._polygon,c=e._polygon;let u=!1;return r&&(r.a=s,r.b=e,r.a_in_b=!0,r.b_in_a=!0,r.overlap=null,r.overlap_x=0,r.overlap_y=0),l&&(s._dirty_coords||s.x!==s._x||s.y!==s._y||s.angle!==s._angle||s.scale_x!==s._scale_x||s.scale_y!==s._scale_y)&&s._calculateCoords(),c&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),o&&!function(s,e){const r=s._polygon,o=r?0:s.x,l=r?0:s.y,c=r?0:s.radius*s.scale,u=r?s._min_x:o-c,n=r?s._min_y:l-c,y=r?s._max_x:o+c,g=r?s._max_y:l+c,f=e._polygon,d=f?0:e.x,w=f?0:e.y,v=f?0:e.radius*e.scale,T=f?e._min_x:d-v,b=f?e._min_y:w-v,O=f?e._max_x:d+v,m=f?e._max_y:w+v;return u<O&&n<m&&y>T&&g>b}(s,e)||(l&&s._dirty_normals&&s._calculateNormals(),c&&e._dirty_normals&&e._calculateNormals(),u=l&&c?function(s,e,r=null){const o=s._coords.length,l=e._coords.length;if(2===o&&2===l){const o=s._coords,l=e._coords;return r&&(r.overlap=0),o[0]===l[0]&&o[1]===l[1]}const c=s._coords,u=e._coords,n=s._normals,y=e._normals;if(o>2)for(let s=0,e=1;s<o;s+=2,e+=2)if(f(c,u,n[s],n[e],r))return!1;if(l>2)for(let s=0,e=1;s<l;s+=2,e+=2)if(f(c,u,y[s],y[e],r))return!1;return!0}(s,e,r):l?g(s,e,r,!1):c?g(e,s,r,!0):function(s,e,r=null){const o=s.radius*s.scale,l=e.radius*e.scale,c=e.x-s.x,u=e.y-s.y,n=o+l,y=c*c+u*u;if(y>n*n)return!1;if(r){const s=Math.sqrt(y);r.a_in_b=o<=l&&s<=l-o,r.b_in_a=l<=o&&s<=o-l,r.overlap=n-s,r.overlap_x=c/s,r.overlap_y=u/s}return!0}(s,e,r)),r&&(r.collision=u),u}function g(s,e,r=null,o=!1){const l=s._coords,c=s._edges,u=s._normals,n=e.x,y=e.y,g=e.radius*e.scale,f=2*g,d=g*g,w=l.length;let v=!0,T=!0,b=null,O=0,m=0;if(2===w){const s=n-l[0],e=y-l[1],o=s*s+e*e;if(o>d)return!1;if(r){const r=Math.sqrt(o);b=g-r,O=s/r,m=e/r,T=!1}}else for(let s=0,e=1;s<w;s+=2,e+=2){const o=n-l[s],p=y-l[e],k=c[s],C=c[e],E=o*k+p*C,x=E<0?-1:E>k*k+C*C?1:0;let M=!1,R=0,A=0,N=0;if(r&&v&&o*o+p*p>d&&(v=!1),x){const e=-1===x,u=e?0===s?w-2:s-2:s===w-2?0:s+2,f=u+1,v=n-l[u],b=y-l[f],O=c[u],m=c[f],k=v*O+b*m;if((k<0?-1:k>O*O+m*m?1:0)===-x){const s=e?o:v,l=e?p:b,c=s*s+l*l;if(c>d)return!1;if(r){const e=Math.sqrt(c);M=!0,R=g-e,A=s/e,N=l/e,T=!1}}}else{const l=u[s],c=u[e],n=o*l+p*c,y=n<0?-n:n;if(n>0&&y>g)return!1;r&&(M=!0,R=g-n,A=l,N=c,(T&&n>=0||R<f)&&(T=!1))}M&&(null===b||b>R)&&(b=R,O=A,m=N)}return r&&(r.a_in_b=o?T:v,r.b_in_a=o?v:T,r.overlap=b,r.overlap_x=o?-O:O,r.overlap_y=o?-m:m),!0}function f(s,e,r,o,l=null){const c=s.length,u=e.length;if(!c||!u)return!0;let n=null,y=null,g=null,f=null;for(let e=0,l=1;e<c;e+=2,l+=2){const c=s[e]*r+s[l]*o;(null===n||n>c)&&(n=c),(null===y||y<c)&&(y=c)}for(let s=0,l=1;s<u;s+=2,l+=2){const c=e[s]*r+e[l]*o;(null===g||g>c)&&(g=c),(null===f||f<c)&&(f=c)}if(n>f||y<g)return!0;if(l){let s=0;if(n<g)if(l.a_in_b=!1,y<f)s=y-g,l.b_in_a=!1;else{const e=y-g,r=f-n;s=e<r?e:-r}else if(l.b_in_a=!1,y>f)s=n-f,l.a_in_b=!1;else{const e=y-g,r=f-n;s=e<r?e:-r}const e=l.overlap,c=s<0?-s:s;if(null===e||e>c){const e=s<0?-1:1;l.overlap=c,l.overlap_x=r*e,l.overlap_y=o*e}}return!1}class d{constructor(s=0,e=0,r=0){this.x=s,this.y=e,this.padding=r,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=r,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(s,e=null,r=!0){return y(this,s,e,r)}potentials(){const s=this._bvh;if(null===s)throw new Error("Body does not belong to a collision system");return s.potentials(this)}remove(){const s=this._bvh;s&&s.remove(this,!1)}createResult(){return new n}static createResult(){return new n}}class w extends d{constructor(s=0,e=0,r=0,o=1,l=0){super(s,e,l),this.radius=r,this.scale=o}draw(s){const e=this.x,r=this.y,o=this.radius*this.scale;s.moveTo(e+o,r),s.arc(e,r,o,0,2*Math.PI)}}class v extends d{constructor(s=0,e=0,r=[],o=0,l=1,c=1,u=0){super(s,e,u),this.angle=o,this.scale_x=l,this.scale_y=c,this._polygon=!0,this._x=s,this._y=e,this._angle=o,this._scale_x=l,this._scale_y=c,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,v.prototype.setPoints.call(this,r)}draw(s){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)s.moveTo(e[0],e[1]),s.arc(e[0],e[1],1,0,2*Math.PI);else{s.moveTo(e[0],e[1]);for(let r=2;r<e.length;r+=2)s.lineTo(e[r],e[r+1]);e.length>4&&s.lineTo(e[0],e[1])}}setPoints(s){const e=s.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const r=this._points;for(let o=0,l=0,c=1;o<e;++o,l+=2,c+=2){const e=s[o];r[l]=e[0],r[c]=e[1]}this._dirty_coords=!0}_calculateCoords(){const s=this.x,e=this.y,r=this.angle,o=this.scale_x,l=this.scale_y,c=this._points,u=this._coords,n=c.length;let y,g,f,d;for(let w=0,v=1;w<n;w+=2,v+=2){let n=c[w]*o,T=c[v]*l;if(r){const s=Math.cos(r),e=Math.sin(r),o=n;n=o*s-T*e,T=o*e+T*s}n+=s,T+=e,u[w]=n,u[v]=T,0===w?(y=g=n,f=d=T):(n<y?y=n:n>g&&(g=n),T<f?f=T:T>d&&(d=T))}this._x=s,this._y=e,this._angle=r,this._scale_x=o,this._scale_y=l,this._min_x=y,this._min_y=f,this._max_x=g,this._max_y=d,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const s=this._coords,e=this._edges,r=this._normals,o=s.length;for(let l=0,c=1;l<o;l+=2,c+=2){const u=l+2<o?l+2:0,n=s[u]-s[l],y=s[u+1]-s[c],g=n||y?Math.sqrt(n*n+y*y):0;e[l]=n,e[c]=y,r[l]=g?y/g:0,r[c]=g?-n/g:0}this._dirty_normals=!1}}class T extends v{constructor(s=0,e=0,r=0){super(s,e,[[0,0]],0,1,1,r),this._point=!0}}T.prototype.setPoints=void 0;class b{constructor(){this._bvh=new u}createCircle(s=0,e=0,r=0,o=1,l=0){const c=new w(s,e,r,o,l);return this._bvh.insert(c),c}createPolygon(s=0,e=0,r=[[0,0]],o=0,l=1,c=1,u=0){const n=new v(s,e,r,o,l,c,u);return this._bvh.insert(n),n}createPoint(s=0,e=0,r=0){const o=new T(s,e,r);return this._bvh.insert(o),o}createResult(){return new n}static createResult(){return new n}insert(...s){for(const e of s)this._bvh.insert(e,!1);return this}remove(...s){for(const e of s)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(s){return this._bvh.draw(s)}drawBVH(s){return this._bvh.drawBVH(s)}potentials(s){return this._bvh.potentials(s)}collides(s,e,r=null,o=!0){return y(s,e,r,o)}}var O=Object.assign||function(s){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(s[o]=r[o])}return s};var m=function(s){var e=s.type,r=function(s,e){var r={};for(var o in s)e.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(s,o)&&(r[o]=s[o]);return r}(s,["type"]);switch(e){case"circle":return p(r);case"ellipse":return k(r);case"line":return C(r);case"path":return N(r);case"polygon":return L(r);case"polyline":return F(r);case"rect":return I(r);case"g":return W(r);default:throw new Error("Not a valid shape type")}},p=function(s){var e=s.cx,r=s.cy,o=s.r;return[{x:e,y:r-o,moveTo:!0},{x:e,y:r+o,curve:{type:"arc",rx:o,ry:o,sweepFlag:1}},{x:e,y:r-o,curve:{type:"arc",rx:o,ry:o,sweepFlag:1}}]},k=function(s){var e=s.cx,r=s.cy,o=s.rx,l=s.ry;return[{x:e,y:r-l,moveTo:!0},{x:e,y:r+l,curve:{type:"arc",rx:o,ry:l,sweepFlag:1}},{x:e,y:r-l,curve:{type:"arc",rx:o,ry:l,sweepFlag:1}}]},C=function(s){var e=s.x1,r=s.x2;return[{x:e,y:s.y1,moveTo:!0},{x:r,y:s.y2}]},E=/[MmLlHhVvCcSsQqTtAaZz]/g,x={A:7,C:6,H:1,L:2,M:2,Q:4,S:4,T:2,V:1,Z:0},M=["a","c","h","l","m","q","s","t","v"],R=function(s){return-1!==M.indexOf(s)},A=["xAxisRotation","largeArcFlag","sweepFlag"],N=function(s){for(var e=s.d,r=function(s){return s.match(E)}(e),o=function(s){return s.split(E).map(function(s){return s.replace(/[0-9]+-/g,function(s){return s.slice(0,-1)+" -"})}).map(function(s){return s.replace(/\.[0-9]+/g,function(s){return s+" "})}).map(function(s){return s.trim()}).filter(function(s){return s.length>0}).map(function(s){return s.split(/[ ,]+/).map(parseFloat).filter(function(s){return!isNaN(s)})})}(e),l=[],c=void 0,u=0,n=r.length;u<n;u++){var y=r[u],g=y.toUpperCase(),f=x[g],d=R(y);if(f>0)for(var w=o.shift(),v=w.length/f,T=0;T<v;T++){var b=l[l.length-1]||{x:0,y:0};switch(g){case"M":var O=(d?b.x:0)+w.shift(),m=(d?b.y:0)+w.shift();0===T?(c={x:O,y:m},l.push({x:O,y:m,moveTo:!0})):l.push({x:O,y:m});break;case"L":l.push({x:(d?b.x:0)+w.shift(),y:(d?b.y:0)+w.shift()});break;case"H":l.push({x:(d?b.x:0)+w.shift(),y:b.y});break;case"V":l.push({x:b.x,y:(d?b.y:0)+w.shift()});break;case"A":l.push({curve:{type:"arc",rx:w.shift(),ry:w.shift(),xAxisRotation:w.shift(),largeArcFlag:w.shift(),sweepFlag:w.shift()},x:(d?b.x:0)+w.shift(),y:(d?b.y:0)+w.shift()});var p=!0,k=!1,C=void 0;try{for(var M,N=A[Symbol.iterator]();!(p=(M=N.next()).done);p=!0){var L=M.value;0===l[l.length-1].curve[L]&&delete l[l.length-1].curve[L]}}catch(s){k=!0,C=s}finally{try{!p&&N.return&&N.return()}finally{if(k)throw C}}break;case"C":l.push({curve:{type:"cubic",x1:(d?b.x:0)+w.shift(),y1:(d?b.y:0)+w.shift(),x2:(d?b.x:0)+w.shift(),y2:(d?b.y:0)+w.shift()},x:(d?b.x:0)+w.shift(),y:(d?b.y:0)+w.shift()});break;case"S":var F=(d?b.x:0)+w.shift(),H=(d?b.y:0)+w.shift(),I=(d?b.x:0)+w.shift(),U=(d?b.y:0)+w.shift(),B={},W=void 0,z=void 0;b.curve&&"cubic"===b.curve.type?(B.x=Math.abs(b.x-b.curve.x2),B.y=Math.abs(b.y-b.curve.y2),W=b.x<b.curve.x2?b.x-B.x:b.x+B.x,z=b.y<b.curve.y2?b.y-B.y:b.y+B.y):(B.x=Math.abs(I-F),B.y=Math.abs(U-H),W=b.x,z=b.y),l.push({curve:{type:"cubic",x1:W,y1:z,x2:F,y2:H},x:I,y:U});break;case"Q":l.push({curve:{type:"quadratic",x1:(d?b.x:0)+w.shift(),y1:(d?b.y:0)+w.shift()},x:(d?b.x:0)+w.shift(),y:(d?b.y:0)+w.shift()});break;case"T":var X=(d?b.x:0)+w.shift(),Y=(d?b.y:0)+w.shift(),Q=void 0,j=void 0;if(b.curve&&"quadratic"===b.curve.type){var Z={x:Math.abs(b.x-b.curve.x1),y:Math.abs(b.y-b.curve.y1)};Q=b.x<b.curve.x1?b.x-Z.x:b.x+Z.x,j=b.y<b.curve.y1?b.y-Z.y:b.y+Z.y}else Q=b.x,j=b.y;l.push({curve:{type:"quadratic",x1:Q,y1:j},x:X,y:Y})}}else{var q=l[l.length-1]||{x:0,y:0};q.x===c.x&&q.y===c.y||l.push({x:c.x,y:c.y})}}return l},L=function(s){var e=s.points;return H({closed:!0,points:e})},F=function(s){var e=s.points;return H({closed:!1,points:e})},H=function(s){var e=s.closed,r=s.points.split(/[\s,]+/).map(function(s){return parseFloat(s)}).reduce(function(s,e,r){return r%2==0?s.push({x:e}):s[(r-1)/2].y=e,s},[]);return e&&r.push(O({},r[0])),r[0].moveTo=!0,r},I=function(s){var e=s.height,r=s.rx,o=s.ry,l=s.width,c=s.x,u=s.y;return r||o?B({height:e,rx:r||o,ry:o||r,width:l,x:c,y:u}):U({height:e,width:l,x:c,y:u})},U=function(s){var e=s.height,r=s.width,o=s.x,l=s.y;return[{x:o,y:l,moveTo:!0},{x:o+r,y:l},{x:o+r,y:l+e},{x:o,y:l+e},{x:o,y:l}]},B=function(s){var e=s.height,r=s.rx,o=s.ry,l=s.width,c=s.x,u=s.y,n={type:"arc",rx:r,ry:o,sweepFlag:1};return[{x:c+r,y:u,moveTo:!0},{x:c+l-r,y:u},{x:c+l,y:u+o,curve:n},{x:c+l,y:u+e-o},{x:c+l-r,y:u+e,curve:n},{x:c+r,y:u+e},{x:c,y:u+e-o,curve:n},{x:c,y:u+o},{x:c+r,y:u,curve:n}]},W=function(s){return s.shapes.map(function(s){return m(s)})},z=m,X=function(s){var e="",r=0,o=void 0,l=!0,c=!1,u=void 0;try{for(var n,y=s[Symbol.iterator]();!(l=(n=y.next()).done);l=!0){var g=n.value,f=g.curve,d=void 0!==f&&f,w=g.moveTo,v=g.x,T=g.y,b=0===r||w,O=r===s.length-1||s[r+1].moveTo,m=0===r?null:s[r-1];if(b)o=g,O||(e+="M"+v+","+T);else if(d){switch(d.type){case"arc":var p=g.curve,k=p.largeArcFlag,C=void 0===k?0:k,E=p.rx,x=p.ry,M=p.sweepFlag,R=void 0===M?0:M,A=p.xAxisRotation;e+="A"+E+","+x+","+(void 0===A?0:A)+","+C+","+R+","+v+","+T;break;case"cubic":var N=g.curve;e+="C"+N.x1+","+N.y1+","+N.x2+","+N.y2+","+v+","+T;break;case"quadratic":var L=g.curve;e+="Q"+L.x1+","+L.y1+","+v+","+T}O&&v===o.x&&T===o.y&&(e+="Z")}else O&&v===o.x&&T===o.y?e+="Z":v!==m.x&&T!==m.y?e+="L"+v+","+T:v!==m.x?e+="H"+v:T!==m.y&&(e+="V"+T);r++}}catch(s){c=!0,u=s}finally{try{!l&&y.return&&y.return()}finally{if(c)throw u}}return e},Y=function(s){var e=Array.isArray(s),r=e?Array.isArray(s[0]):"g"===s.type,o=e?s:r?s.shapes.map(function(s){return z(s)}):z(s);return r?o.map(function(s){return X(s)}):X(o)},Q=("function"==typeof Symbol&&Symbol.iterator,r(0));r.d(e,"a",function(){return j});class j{constructor(s,e){this.p5=s,this.settings=Object.assign({},o,e),this.paused=!1,this.showWalkers=this.settings.ShowWalkers,this.showClusters=this.settings.ShowClusters,this.showShapes=this.settings.ShowShapes,this.useFrame=this.settings.UseFrame,this.renderMode=this.settings.RenderMode,this.numWalkers=0,this.customMovementFunction=void 0,this.edgeMargin=this.settings.EdgeMargin,this.edges={},this.frame={},"number"==typeof this.settings.FrameSize?(this.frame.left=window.innerWidth/2-this.settings.FrameSize/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize/2):"object"==typeof this.settings.FrameSize&&(this.frame.left=window.innerWidth/2-this.settings.FrameSize[0]/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize[0]/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize[1]/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize[1]/2),this.resetEdges(),this.maxDistance=this.p5.dist(this.edges.left,this.edges.top,window.innerWidth/2,window.innerHeight/2),this.system=new b,this.bodies=[],this.shapes=[],this.lines=[]}iterate(){this.paused||(this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createDefaultWalkers(this.settings.MaxWalkers-this.numWalkers,this.settings.ReplenishmentSource),this.moveWalkers(),this.system.update(),this.handleCollisions(),this.pruneWalkers())}draw(){if(this.settings.UseColors?this.p5.background(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.background(255),this.showShapes)for(let s of this.shapes){this.settings.UseColors?(this.p5.fill(this.getColorStringFromObject(this.settings.ShapeColor)),this.p5.stroke(this.getColorStringFromObject(this.settings.ShapeColor))):(this.p5.noFill(),this.p5.stroke(100)),this.p5.beginShape();for(let e=0;e<s._coords.length;e+=2)this.p5.vertex(s._coords[e],s._coords[e+1]);this.p5.endShape()}if("Lines"==this.renderMode){if(this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.LineColor)):this.p5.stroke(75),this.lines.length>0)for(let s of this.lines)this.p5.line(s.p1.x,s.p1.y,s.p2.x,s.p2.y)}else for(let s of this.bodies)if(s._point)this.p5.noFill(),s.stuck&&this.showClusters?(this.p5.noStroke(),this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(200),this.p5.ellipse(s.x,s.y,5)):!s.stuck&&this.showWalkers?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.stroke(0):this.p5.noStroke(),this.p5.point(s.x,s.y);else if(s._circle)this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),s.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!s.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.ellipse(s.x,s.y,2*s.radius);else if(s._polygon){this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),s.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!s.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.beginShape();for(let e=0;e<s._coords.length-1;e+=2)this.p5.vertex(s._coords[e],s._coords[e+1]);this.p5.endShape()}this.useFrame&&this.drawFrame()}drawFrame(){this.p5.noFill(),this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.FrameColor)):this.p5.stroke(0),"number"==typeof this.settings.FrameSize?this.p5.rect(window.innerWidth/2-this.settings.FrameSize/2-1,window.innerHeight/2-this.settings.FrameSize/2-1,this.settings.FrameSize+2,this.settings.FrameSize+2):"object"==typeof this.settings.FrameSize&&this.p5.rect(window.innerWidth/2-this.settings.FrameSize[0]/2-1,window.innerHeight/2-this.settings.FrameSize[1]/2-1,this.settings.FrameSize[0]+2,this.settings.FrameSize[1]+2)}resetEdges(){this.edges.left=this.useFrame?this.frame.left:0,this.edges.right=this.useFrame?this.frame.right:window.innerWidth,this.edges.top=this.useFrame?this.frame.top:0,this.edges.bottom=this.useFrame?this.frame.bottom:window.innerHeight}moveWalkers(){if(this.bodies.length>0)for(let s of this.bodies)if(!s.stuck){let e,r=this.p5.random(-1,1),o=this.p5.random(-1,1);if(this.settings.UsePerWalkerBias&&s.hasOwnProperty("BiasTowards"))r+=(e=this.getDeltasTowards(s.x,s.y,s.BiasTowards.x,s.BiasTowards.y)).x,o+=e.y;else switch(this.settings.BiasTowards){case"Top":o-=this.settings.BiasForce;break;case"Bottom":o+=this.settings.BiasForce;break;case"Left":r-=this.settings.BiasForce;break;case"Right":r+=this.settings.BiasForce;break;case"Center":r+=(e=this.getDeltasTowards(s.x,s.y,window.innerWidth/2,window.innerHeight/2)).x,o+=e.y;break;case"Edges":r-=(e=this.getDeltasTowards(s.x,s.y,window.innerWidth/2,window.innerHeight/2)).x,o-=e.y;break;case"Equator":s.y<window.innerHeight/2?o+=this.settings.BiasForce:o-=this.settings.BiasForce;break;case"Meridian":s.x<window.innerWidth/2?r+=this.settings.BiasForce:r-=this.settings.BiasForce}if(null!=typeof this.customMovementFunction&&this.customMovementFunction instanceof Function){let e=this.customMovementFunction(s);r+=e.dx,o+=e.dy}s._point&&(r=Math.round(r),o=Math.round(o)),s.x+=r,s.y+=o,s.age++}}getDeltasTowards(s,e,r,o){let l=Math.atan2(o-e,r-s);return{x:Math.cos(l)*this.settings.BiasForce,y:Math.sin(l)*this.settings.BiasForce}}handleCollisions(){for(let s of this.shapes){const e=s.potentials();for(let r of e)s.collides(r)&&(r.stuck=!0,this.numWalkers--)}for(let s of this.bodies){if(s.stuck)continue;const e=s.potentials();for(let r of e)s._point?r.stuck&&(s.stuck=!0,this.numWalkers--):r.stuck&&s.collides(r)&&(s.stuck=!0,this.numWalkers--,this.settings.CaptureLines&&this.lines.push({p1:{x:s.x,y:s.y},p2:{x:r.x,y:r.y}}))}}pruneWalkers(){if(this.settings.PruneOldWalkers||this.settings.PruneDistantWalkers)for(let[s,e]of this.bodies.entries())!e.stuck&&(this.settings.PruneOldWalkers&&e.age>this.settings.MaxAge||this.settings.PruneDistantWalkers&&this.p5.dist(e.x,e.y,e.originalX,e.originalY)>this.settings.MaxWanderDistance)&&(e.remove(),this.bodies.splice(s,1),this.numWalkers--)}createParticle(s){if(void 0===s||"object"!=typeof s)return;let e;if(s.hasOwnProperty("type"))switch(s.type){case"Point":(e=this.system.createPoint(Math.round(s.x),Math.round(s.y)))._point=!0;break;case"Circle":default:(e=this.system.createCircle(s.x,s.y,s.diameter/2))._circle=!0;break;case"Polygon":(e=this.system.createPolygon(s.x,s.y,s.polygon,s.hasOwnProperty("rotation")?this.p5.radians(s.rotation):0))._polygon=!0}else{const r=s.hasOwnProperty("diameter")?s.diameter:this.settings.CircleDiameter;(e=this.system.createCircle(s.x,s.y,r/2))._circle=!0}e.stuck=!!s.hasOwnProperty("stuck")&&s.stuck,e.age=0,s.hasOwnProperty("BiasTowards")&&(e.BiasTowards=s.BiasTowards),e.originalX=e.x,e.originalY=e.y,this.bodies.push(e)}createWalker(s){this.createParticle(s),this.numWalkers++}createDefaultWalkers(s=this.settings.MaxWalkers,e=this.settings.WalkerSource){for(let r=0;r<s;r++){let s={};switch(e){case"Edges":switch(Math.round(this.p5.random(1,4))){case 1:s.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),s.y=this.p5.random(this.edges.top,this.edges.top+this.edgeMargin);break;case 3:s.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),s.y=this.p5.random(this.edges.bottom-this.edgeMargin,this.edges.bottom);break;case 4:s.x=this.p5.random(this.edges.left,this.edges.left+this.edgeMargin),s.y=this.p5.random(this.edges.top,this.edges.bottom);break;case 2:s.x=this.p5.random(this.edges.right-this.edgeMargin,this.edges.right),s.y=this.p5.random(this.edges.top,this.edges.bottom)}break;case"Circle":let r;switch(typeof this.settings.FrameSize){case"number":r=this.settings.FrameSize/2;break;case"object":r=this.settings.FrameSize[0]>this.settings.FrameSize[1]?this.settings.FrameSize[1]/2:this.settings.FrameSize[0]/2}let o=this.p5.random(5,r),l=this.p5.random(360),c=this.settings.hasOwnProperty("CircleCenter")?this.settings.CircleCenter:{x:window.innerWidth/2,y:window.innerHeight/2};s.x=c.x+o*Math.cos(l*Math.PI/180),s.y=c.y+o*Math.sin(l*Math.PI/180);break;case"Random":s.x=this.p5.random(this.edges.left,this.edges.right),s.y=this.p5.random(this.edges.top,this.edges.bottom);break;case"Center":s.x=window.innerWidth/2,s.y=window.innerHeight/2;break;case"Offscreen":if(s.x=this.p5.random(this.edges.left-200,this.edges.right+200),s.y=this.p5.random(this.edges.top-200,this.edges.bottom+200),s.x>this.edges.left&&s.x<this.edges.right&&s.y>this.edges.top&&s.y<this.edges.bottom)continue}if(this.settings.VaryDiameterByDistance){let e=this.p5.dist(s.x,s.y,window.innerWidth/2,window.innerHeight/2);s.diameter=this.p5.map(e,0,this.maxDistance,this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1])}else this.settings.VaryDiameterRandomly&&(s.diameter=this.p5.random(this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1]));this.createWalker(s)}}createDefaultClusters(s=this.settings.InitialClusterType){let e=[];switch(s){case"Point":e.push({x:window.innerWidth/2,y:window.innerHeight/2,diameter:this.settings.CircleDiameter});break;case"Ring":let r=100,o=20;for(let s=0;s<o;s++)e.push({x:window.innerWidth/2+r*Math.cos(360/o*s*Math.PI/180),y:window.innerHeight/2+r*Math.sin(360/o*s*Math.PI/180),diameter:this.settings.CircleDiameter});break;case"Random":for(let s=0;s<100;s++)e.push({x:this.p5.random(this.edges.left,this.edges.right),y:this.p5.random(this.edges.top,this.edges.bottom),diameter:this.settings.CircleDiameter});break;case"Wall":switch(this.settings.BiasTowards){case"Top":e=this.createHorizontalClusterWall(this.edges.top);break;case"Bottom":e=this.createHorizontalClusterWall(this.edges.bottom);break;case"Left":e=this.createVerticalClusterWall(this.edges.left);break;case"Right":e=this.createVerticalClusterWall(this.edges.right);break;case"Edges":e=(e=(e=(e=e.concat(this.createHorizontalClusterWall(this.edges.top))).concat(this.createHorizontalClusterWall(this.edges.bottom))).concat(this.createVerticalClusterWall(this.edges.left))).concat(this.createVerticalClusterWall(this.edges.right));break;case"Equator":e=e.concat(this.createHorizontalClusterWall(window.innerHeight/2));break;case"Meridian":e=e.concat(this.createVerticalClusterWall(window.innerWidth/2))}}this.createClusterFromParams(e)}createHorizontalClusterWall(s){let e=[],r=this.useFrame?this.edges.right-this.edges.left:window.innerWidth;for(let o=0;o<=r/this.settings.CircleDiameter;o++)e.push({x:this.edges.left+o*this.settings.CircleDiameter,y:s,diameter:this.settings.CircleDiameter});return e}createVerticalClusterWall(s){let e=[],r=this.useFrame?this.edges.bottom-this.edges.top:window.innerHeight;for(let o=0;o<=r/this.settings.CircleDiameter;o++)e.push({x:s,y:this.edges.top+o*this.settings.CircleDiameter,diameter:this.settings.CircleDiameter});return e}createClusterFromParams(s){if(s.length>0)for(let e of s)e.stuck=!0,this.createParticle(e)}createShapesFromPaths(s){if(s.hasOwnProperty("points")||0!=s.length)for(let e of s)if(e.solid){let s=this.system.createPolygon(e.x,e.y,e.points);s.solid=e.solid,s.closed=e.closed,this.shapes.push(s)}else for(let s=1;s<e.points.length;s++){let r=this.system.createPolygon(e.x,e.y,[[e.points[s-1][0],e.points[s-1][1]],[e.points[s][0],e.points[s][1]]]);r.solid=!1,r.closed=!1,this.shapes.push(r)}else console.error("Unable to create shapes. Paths must have an array of points [[x,y],...]")}removeAll(){for(let s of this.bodies)this.system.remove(s);for(let s of this.shapes)this.system.remove(s);this.bodies=[],this.shapes=[],this.lines=[],this.numWalkers=0}togglePause(){this.paused=!this.paused}toggleShowWalkers(){this.showWalkers=!this.showWalkers}toggleShowClusters(){this.showClusters=!this.showClusters}toggleShowShapes(){this.showShapes=!this.showShapes}toggleUseFrame(){this.useFrame=!this.useFrame,this.resetEdges()}toggleLineRenderingMode(){"Lines"!=this.renderMode?this.settings.CaptureLines?this.renderMode="Lines":console.error("Line rendering mode only allowed when CaptureLines is set."):this.renderMode="Shapes"}pause(){this.paused=!0}unpause(){this.paused=!1}getColorStringFromObject(s){return"hsla("+s.h+", "+s.s+"%, "+s.b+"%, "+s.a+")"}export(){let s=document.createElement("svg");switch(s.setAttribute("xmlns","http://www.w3.org/2000/svg"),s.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),s.setAttribute("width",window.innerWidth),s.setAttribute("height",window.innerHeight),s.setAttribute("viewBox","0 0 "+window.innerWidth+" "+window.innerHeight),this.renderMode){case"Shapes":default:for(let e of this.bodies)(e.stuck||this.showWalkers)&&(e._circle?s.appendChild(this.createCircleElFromBody(e)):s.appendChild(this.createPathElFromPoints(this.getPointsFromCoords(e._coords))));break;case"Lines":if(this.lines.length>0)for(let e of this.lines){let r=[];r.push({x:e.p1.x,y:e.p1.y}),r.push({x:e.p2.x,y:e.p2.y}),s.appendChild(this.createPathElFromPoints(r))}}if(this.shapes.length>0)for(let e of this.shapes)s.appendChild(this.createPathElFromPoints(this.getPointsFromCoords(e._coords)));let e=document.implementation.createDocumentType("svg","-//W3C//DTD SVG 1.1//EN","http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"),r=document.implementation.createDocument("http://www.w3.org/2000/svg","svg",e);r.replaceChild(s,r.documentElement);let o=(new XMLSerializer).serializeToString(r),l=new Blob([o.replace(/></g,">\n\r<")]);Object(Q.saveAs)(l,"dla-"+Date.now()+".svg")}getPointsFromCoords(s){let e=[];for(let r=0;r<s.length-1;r+=2)e.push({x:s[r],y:s[r+1]});return e}createPathElFromPoints(s){let e="";for(let[r,o]of s.entries())e+=o.x+","+o.y,r<s.length-1&&(e+=" ");let r=Y({type:"polyline",points:e}),o=document.createElement("path");return o.setAttribute("d",r),o.setAttribute("style","fill: none; stroke: black; stroke-width: 1"),o}createCircleElFromBody(s){let e=document.createElement("circle");return e.setAttribute("cx",s.x),e.setAttribute("cy",s.y),e.setAttribute("r",s.radius),e}}},function(s,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(s){"object"==typeof window&&(r=window)}s.exports=r},function(s,e,r){"use strict";var o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(s,e){s.__proto__=e}||function(s,e){for(var r in e)e.hasOwnProperty(r)&&(s[r]=e[r])};function l(s,e){function r(){this.constructor=s}o(s,e),s.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function c(s,e){var r=s[0],o=s[1];return[r*Math.cos(e)-o*Math.sin(e),r*Math.sin(e)+o*Math.cos(e)]}function u(){for(var s=[],e=0;e<arguments.length;e++)s[e]=arguments[e];for(var r=0;r<s.length;r++)if("number"!=typeof s[r])throw new Error("assertNumbers arguments["+r+"] is not a number. "+typeof s[r]+" == typeof "+s[r]);return!0}var n=Math.PI;function y(s,e,r){s.lArcFlag=0===s.lArcFlag?0:1,s.sweepFlag=0===s.sweepFlag?0:1;var o=s.rX,l=s.rY,u=s.x,y=s.y;o=Math.abs(s.rX),l=Math.abs(s.rY);var g=c([(e-u)/2,(r-y)/2],-s.xRot/180*n),f=g[0],d=g[1],w=Math.pow(f,2)/Math.pow(o,2)+Math.pow(d,2)/Math.pow(l,2);1<w&&(o*=Math.sqrt(w),l*=Math.sqrt(w)),s.rX=o,s.rY=l;var v=Math.pow(o,2)*Math.pow(d,2)+Math.pow(l,2)*Math.pow(f,2),T=(s.lArcFlag!==s.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(o,2)*Math.pow(l,2)-v)/v)),b=o*d/l*T,O=-l*f/o*T,m=c([b,O],s.xRot/180*n);s.cX=m[0]+(e+u)/2,s.cY=m[1]+(r+y)/2,s.phi1=Math.atan2((d-O)/l,(f-b)/o),s.phi2=Math.atan2((-d-O)/l,(-f-b)/o),0===s.sweepFlag&&s.phi2>s.phi1&&(s.phi2-=2*n),1===s.sweepFlag&&s.phi2<s.phi1&&(s.phi2+=2*n),s.phi1*=180/n,s.phi2*=180/n}function g(s,e,r){u(s,e,r);var o=s*s+e*e-r*r;if(0>o)return[];if(0===o)return[[s*r/(s*s+e*e),e*r/(s*s+e*e)]];var l=Math.sqrt(o);return[[(s*r+e*l)/(s*s+e*e),(e*r-s*l)/(s*s+e*e)],[(s*r-e*l)/(s*s+e*e),(e*r+s*l)/(s*s+e*e)]]}var f,d=Math.PI/180;function w(s,e,r){return(1-r)*s+r*e}function v(s,e,r,o){return s+Math.cos(o/180*n)*e+Math.sin(o/180*n)*r}function T(s,e,r,o){var l=e-s,c=r-e,u=3*l+3*(o-r)-6*c,n=6*(c-l),y=3*l;return Math.abs(u)<1e-6?[-y/n]:function(s,e,r){void 0===r&&(r=1e-6);var o=s*s/4-e;if(o<-r)return[];if(o<=r)return[-s/2];var l=Math.sqrt(o);return[-s/2-l,-s/2+l]}(n/u,y/u,1e-6)}function b(s,e,r,o,l){var c=1-l;return s*(c*c*c)+e*(3*c*c*l)+r*(3*c*l*l)+o*(l*l*l)}!function(s){function e(){return l(function(s,e,r){return s.relative&&(void 0!==s.x1&&(s.x1+=e),void 0!==s.y1&&(s.y1+=r),void 0!==s.x2&&(s.x2+=e),void 0!==s.y2&&(s.y2+=r),void 0!==s.x&&(s.x+=e),void 0!==s.y&&(s.y+=r),s.relative=!1),s})}function r(){var s=NaN,e=NaN,r=NaN,o=NaN;return l(function(l,c,u){return l.type&x.SMOOTH_CURVE_TO&&(l.type=x.CURVE_TO,s=isNaN(s)?c:s,e=isNaN(e)?u:e,l.x1=l.relative?c-s:2*c-s,l.y1=l.relative?u-e:2*u-e),l.type&x.CURVE_TO?(s=l.relative?c+l.x2:l.x2,e=l.relative?u+l.y2:l.y2):(s=NaN,e=NaN),l.type&x.SMOOTH_QUAD_TO&&(l.type=x.QUAD_TO,r=isNaN(r)?c:r,o=isNaN(o)?u:o,l.x1=l.relative?c-r:2*c-r,l.y1=l.relative?u-o:2*u-o),l.type&x.QUAD_TO?(r=l.relative?c+l.x1:l.x1,o=l.relative?u+l.y1:l.y1):(r=NaN,o=NaN),l})}function o(){var s=NaN,e=NaN;return l(function(r,o,l){if(r.type&x.SMOOTH_QUAD_TO&&(r.type=x.QUAD_TO,s=isNaN(s)?o:s,e=isNaN(e)?l:e,r.x1=r.relative?o-s:2*o-s,r.y1=r.relative?l-e:2*l-e),r.type&x.QUAD_TO){s=r.relative?o+r.x1:r.x1,e=r.relative?l+r.y1:r.y1;var c=r.x1,u=r.y1;r.type=x.CURVE_TO,r.x1=((r.relative?0:o)+2*c)/3,r.y1=((r.relative?0:l)+2*u)/3,r.x2=(r.x+2*c)/3,r.y2=(r.y+2*u)/3}else s=NaN,e=NaN;return r})}function l(s){var e=0,r=0,o=NaN,l=NaN;return function(c){if(isNaN(o)&&!(c.type&x.MOVE_TO))throw new Error("path must start with moveto");var u=s(c,e,r,o,l);return c.type&x.CLOSE_PATH&&(e=o,r=l),void 0!==c.x&&(e=c.relative?e+c.x:c.x),void 0!==c.y&&(r=c.relative?r+c.y:c.y),c.type&x.MOVE_TO&&(o=e,l=r),u}}function n(s,e,r,o,c,n){return u(s,e,r,o,c,n),l(function(l,u,y,g){var f=l.x1,d=l.x2,w=l.relative&&!isNaN(g),v=void 0!==l.x?l.x:w?0:u,T=void 0!==l.y?l.y:w?0:y;function b(s){return s*s}l.type&x.HORIZ_LINE_TO&&0!==e&&(l.type=x.LINE_TO,l.y=l.relative?0:y),l.type&x.VERT_LINE_TO&&0!==r&&(l.type=x.LINE_TO,l.x=l.relative?0:u),void 0!==l.x&&(l.x=l.x*s+T*r+(w?0:c)),void 0!==l.y&&(l.y=v*e+l.y*o+(w?0:n)),void 0!==l.x1&&(l.x1=l.x1*s+l.y1*r+(w?0:c)),void 0!==l.y1&&(l.y1=f*e+l.y1*o+(w?0:n)),void 0!==l.x2&&(l.x2=l.x2*s+l.y2*r+(w?0:c)),void 0!==l.y2&&(l.y2=d*e+l.y2*o+(w?0:n));var O=s*o-e*r;if(void 0!==l.xRot&&(1!==s||0!==e||0!==r||1!==o))if(0===O)delete l.rX,delete l.rY,delete l.xRot,delete l.lArcFlag,delete l.sweepFlag,l.type=x.LINE_TO;else{var m=l.xRot*Math.PI/180,p=Math.sin(m),k=Math.cos(m),C=1/b(l.rX),E=1/b(l.rY),M=b(k)*C+b(p)*E,R=2*p*k*(C-E),A=b(p)*C+b(k)*E,N=M*o*o-R*e*o+A*e*e,L=R*(s*o+e*r)-2*(M*r*o+A*s*e),F=M*r*r-R*s*r+A*s*s,H=(Math.atan2(L,N-F)+Math.PI)%Math.PI/2,I=Math.sin(H),U=Math.cos(H);l.rX=Math.abs(O)/Math.sqrt(N*b(U)+L*I*U+F*b(I)),l.rY=Math.abs(O)/Math.sqrt(N*b(I)-L*I*U+F*b(U)),l.xRot=180*H/Math.PI}return void 0!==l.sweepFlag&&0>O&&(l.sweepFlag=+!l.sweepFlag),l})}s.ROUND=function(s){function e(e){return Math.round(e*s)/s}return void 0===s&&(s=1e13),u(s),function(s){return void 0!==s.x1&&(s.x1=e(s.x1)),void 0!==s.y1&&(s.y1=e(s.y1)),void 0!==s.x2&&(s.x2=e(s.x2)),void 0!==s.y2&&(s.y2=e(s.y2)),void 0!==s.x&&(s.x=e(s.x)),void 0!==s.y&&(s.y=e(s.y)),s}},s.TO_ABS=e,s.TO_REL=function(){return l(function(s,e,r){return s.relative||(void 0!==s.x1&&(s.x1-=e),void 0!==s.y1&&(s.y1-=r),void 0!==s.x2&&(s.x2-=e),void 0!==s.y2&&(s.y2-=r),void 0!==s.x&&(s.x-=e),void 0!==s.y&&(s.y-=r),s.relative=!0),s})},s.NORMALIZE_HVZ=function(s,e,r){return void 0===s&&(s=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),l(function(o,l,c,u,n){if(isNaN(u)&&!(o.type&x.MOVE_TO))throw new Error("path must start with moveto");return e&&o.type&x.HORIZ_LINE_TO&&(o.type=x.LINE_TO,o.y=o.relative?0:c),r&&o.type&x.VERT_LINE_TO&&(o.type=x.LINE_TO,o.x=o.relative?0:l),s&&o.type&x.CLOSE_PATH&&(o.type=x.LINE_TO,o.x=o.relative?u-l:u,o.y=o.relative?n-c:n),o.type&x.ARC&&(0===o.rX||0===o.rY)&&(o.type=x.LINE_TO,delete o.rX,delete o.rY,delete o.xRot,delete o.lArcFlag,delete o.sweepFlag),o})},s.NORMALIZE_ST=r,s.QT_TO_C=o,s.INFO=l,s.SANITIZE=function(s){void 0===s&&(s=0),u(s);var e=NaN,r=NaN,o=NaN,c=NaN;return l(function(l,u,n,y,g){var f=Math.abs,d=!1,w=0,v=0;if(l.type&x.SMOOTH_CURVE_TO&&(w=isNaN(e)?0:u-e,v=isNaN(r)?0:n-r),l.type&(x.CURVE_TO|x.SMOOTH_CURVE_TO)?(e=l.relative?u+l.x2:l.x2,r=l.relative?n+l.y2:l.y2):(e=NaN,r=NaN),l.type&x.SMOOTH_QUAD_TO?(o=isNaN(o)?u:2*u-o,c=isNaN(c)?n:2*n-c):l.type&x.QUAD_TO?(o=l.relative?u+l.x1:l.x1,c=l.relative?n+l.y1:l.y2):(o=NaN,c=NaN),l.type&x.LINE_COMMANDS||l.type&x.ARC&&(0===l.rX||0===l.rY||!l.lArcFlag)||l.type&x.CURVE_TO||l.type&x.SMOOTH_CURVE_TO||l.type&x.QUAD_TO||l.type&x.SMOOTH_QUAD_TO){var T=void 0===l.x?0:l.relative?l.x:l.x-u,b=void 0===l.y?0:l.relative?l.y:l.y-n;w=isNaN(o)?void 0===l.x1?w:l.relative?l.x:l.x1-u:o-u,v=isNaN(c)?void 0===l.y1?v:l.relative?l.y:l.y1-n:c-n;var O=void 0===l.x2?0:l.relative?l.x:l.x2-u,m=void 0===l.y2?0:l.relative?l.y:l.y2-n;f(T)<=s&&f(b)<=s&&f(w)<=s&&f(v)<=s&&f(O)<=s&&f(m)<=s&&(d=!0)}return l.type&x.CLOSE_PATH&&f(u-y)<=s&&f(n-g)<=s&&(d=!0),d?[]:l})},s.MATRIX=n,s.ROTATE=function(s,e,r){void 0===e&&(e=0),void 0===r&&(r=0),u(s,e,r);var o=Math.sin(s),l=Math.cos(s);return n(l,o,-o,l,e-e*l+r*o,r-e*o-r*l)},s.TRANSLATE=function(s,e){return void 0===e&&(e=0),u(s,e),n(1,0,0,1,s,e)},s.SCALE=function(s,e){return void 0===e&&(e=s),u(s,e),n(s,0,0,e,0,0)},s.SKEW_X=function(s){return u(s),n(1,0,Math.atan(s),1,0,0)},s.SKEW_Y=function(s){return u(s),n(1,Math.atan(s),0,1,0,0)},s.X_AXIS_SYMMETRY=function(s){return void 0===s&&(s=0),u(s),n(-1,0,0,1,s,0)},s.Y_AXIS_SYMMETRY=function(s){return void 0===s&&(s=0),u(s),n(1,0,0,-1,0,s)},s.A_TO_C=function(){return l(function(s,e,r){return x.ARC===s.type?function(s,e,r){var o,l,u,n;s.cX||y(s,e,r);for(var g=Math.min(s.phi1,s.phi2),f=Math.max(s.phi1,s.phi2)-g,v=Math.ceil(f/90),T=new Array(v),b=e,O=r,m=0;m<v;m++){var p=w(s.phi1,s.phi2,m/v),k=w(s.phi1,s.phi2,(m+1)/v),C=k-p,E=4/3*Math.tan(C*d/4),M=[Math.cos(p*d)-E*Math.sin(p*d),Math.sin(p*d)+E*Math.cos(p*d)],R=M[0],A=M[1],N=[Math.cos(k*d),Math.sin(k*d)],L=N[0],F=N[1],H=[L+E*Math.sin(k*d),F-E*Math.cos(k*d)],I=H[0],U=H[1];T[m]={relative:s.relative,type:x.CURVE_TO};var B=function(e,r){var o=c([e*s.rX,r*s.rY],s.xRot),l=o[0],u=o[1];return[s.cX+l,s.cY+u]};o=B(R,A),T[m].x1=o[0],T[m].y1=o[1],l=B(I,U),T[m].x2=l[0],T[m].y2=l[1],u=B(L,F),T[m].x=u[0],T[m].y=u[1],s.relative&&(T[m].x1-=b,T[m].y1-=O,T[m].x2-=b,T[m].y2-=O,T[m].x-=b,T[m].y-=O),b=(n=[T[m].x,T[m].y])[0],O=n[1]}return T}(s,s.relative?0:e,s.relative?0:r):s})},s.ANNOTATE_ARCS=function(){return l(function(s,e,r){return s.relative&&(e=0,r=0),x.ARC===s.type&&y(s,e,r),s})},s.CLONE=function(){return function(s){var e={};for(var r in s)e[r]=s[r];return e}},s.CALCULATE_BOUNDS=function(){var s=e(),c=o(),u=r(),n=l(function(e,r,o){var l=u(c(s(function(s){var e={};for(var r in s)e[r]=s[r];return e}(e))));function f(s){s>n.maxX&&(n.maxX=s),s<n.minX&&(n.minX=s)}function d(s){s>n.maxY&&(n.maxY=s),s<n.minY&&(n.minY=s)}if(l.type&x.DRAWING_COMMANDS&&(f(r),d(o)),l.type&x.HORIZ_LINE_TO&&f(l.x),l.type&x.VERT_LINE_TO&&d(l.y),l.type&x.LINE_TO&&(f(l.x),d(l.y)),l.type&x.CURVE_TO){f(l.x),d(l.y);for(var w=0,O=T(r,l.x1,l.x2,l.x);w<O.length;w++)0<(W=O[w])&&1>W&&f(b(r,l.x1,l.x2,l.x,W));for(var m=0,p=T(o,l.y1,l.y2,l.y);m<p.length;m++)0<(W=p[m])&&1>W&&d(b(o,l.y1,l.y2,l.y,W))}if(l.type&x.ARC){f(l.x),d(l.y),y(l,r,o);for(var k=l.xRot/180*Math.PI,C=Math.cos(k)*l.rX,E=Math.sin(k)*l.rX,M=-Math.sin(k)*l.rY,R=Math.cos(k)*l.rY,A=l.phi1<l.phi2?[l.phi1,l.phi2]:-180>l.phi2?[l.phi2+360,l.phi1+360]:[l.phi2,l.phi1],N=A[0],L=A[1],F=function(s){var e=s[0],r=s[1],o=180*Math.atan2(r,e)/Math.PI;return o<N?o+360:o},H=0,I=g(M,-C,0).map(F);H<I.length;H++)(W=I[H])>N&&W<L&&f(v(l.cX,C,M,W));for(var U=0,B=g(R,-E,0).map(F);U<B.length;U++){var W;(W=B[U])>N&&W<L&&d(v(l.cY,E,R,W))}}return e});return n.minX=1/0,n.maxX=-1/0,n.minY=1/0,n.maxY=-1/0,n}}(f||(f={}));var O,m,p=function(){function s(){}return s.prototype.round=function(s){return this.transform(f.ROUND(s))},s.prototype.toAbs=function(){return this.transform(f.TO_ABS())},s.prototype.toRel=function(){return this.transform(f.TO_REL())},s.prototype.normalizeHVZ=function(s,e,r){return this.transform(f.NORMALIZE_HVZ(s,e,r))},s.prototype.normalizeST=function(){return this.transform(f.NORMALIZE_ST())},s.prototype.qtToC=function(){return this.transform(f.QT_TO_C())},s.prototype.aToC=function(){return this.transform(f.A_TO_C())},s.prototype.sanitize=function(s){return this.transform(f.SANITIZE(s))},s.prototype.translate=function(s,e){return this.transform(f.TRANSLATE(s,e))},s.prototype.scale=function(s,e){return this.transform(f.SCALE(s,e))},s.prototype.rotate=function(s,e,r){return this.transform(f.ROTATE(s,e,r))},s.prototype.matrix=function(s,e,r,o,l,c){return this.transform(f.MATRIX(s,e,r,o,l,c))},s.prototype.skewX=function(s){return this.transform(f.SKEW_X(s))},s.prototype.skewY=function(s){return this.transform(f.SKEW_Y(s))},s.prototype.xSymmetry=function(s){return this.transform(f.X_AXIS_SYMMETRY(s))},s.prototype.ySymmetry=function(s){return this.transform(f.Y_AXIS_SYMMETRY(s))},s.prototype.annotateArcs=function(){return this.transform(f.ANNOTATE_ARCS())},s}(),k=function(s){return" "===s||"\t"===s||"\r"===s||"\n"===s},C=function(s){return"0".charCodeAt(0)<=s.charCodeAt(0)&&s.charCodeAt(0)<="9".charCodeAt(0)},E=function(s){function e(){var e=s.call(this)||this;return e.curNumber="",e.curCommandType=-1,e.curCommandRelative=!1,e.canParseCommandOrComma=!0,e.curNumberHasExp=!1,e.curNumberHasExpDigits=!1,e.curNumberHasDecimal=!1,e.curArgs=[],e}return l(e,s),e.prototype.finish=function(s){if(void 0===s&&(s=[]),this.parse(" ",s),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return s},e.prototype.parse=function(s,e){var r=this;void 0===e&&(e=[]);for(var o=function(s){e.push(s),r.curArgs.length=0,r.canParseCommandOrComma=!0},l=0;l<s.length;l++){var c=s[l];if(C(c))this.curNumber+=c,this.curNumberHasExpDigits=this.curNumberHasExp;else if("e"!==c&&"E"!==c)if("-"!==c&&"+"!==c||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==c||this.curNumberHasExp||this.curNumberHasDecimal){if(this.curNumber&&-1!==this.curCommandType){var u=Number(this.curNumber);if(isNaN(u))throw new SyntaxError("Invalid number ending at "+l);if(this.curCommandType===x.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>u)throw new SyntaxError('Expected positive number, got "'+u+'" at index "'+l+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+l+'"');this.curArgs.push(u),this.curArgs.length===M[this.curCommandType]&&(x.HORIZ_LINE_TO===this.curCommandType?o({type:x.HORIZ_LINE_TO,relative:this.curCommandRelative,x:u}):x.VERT_LINE_TO===this.curCommandType?o({type:x.VERT_LINE_TO,relative:this.curCommandRelative,y:u}):this.curCommandType===x.MOVE_TO||this.curCommandType===x.LINE_TO||this.curCommandType===x.SMOOTH_QUAD_TO?(o({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),x.MOVE_TO===this.curCommandType&&(this.curCommandType=x.LINE_TO)):this.curCommandType===x.CURVE_TO?o({type:x.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===x.SMOOTH_CURVE_TO?o({type:x.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===x.QUAD_TO?o({type:x.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===x.ARC&&o({type:x.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!k(c))if(","===c&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==c&&"-"!==c&&"."!==c){if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+l+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+c+'" at index '+l+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==c&&"Z"!==c)if("h"===c||"H"===c)this.curCommandType=x.HORIZ_LINE_TO,this.curCommandRelative="h"===c;else if("v"===c||"V"===c)this.curCommandType=x.VERT_LINE_TO,this.curCommandRelative="v"===c;else if("m"===c||"M"===c)this.curCommandType=x.MOVE_TO,this.curCommandRelative="m"===c;else if("l"===c||"L"===c)this.curCommandType=x.LINE_TO,this.curCommandRelative="l"===c;else if("c"===c||"C"===c)this.curCommandType=x.CURVE_TO,this.curCommandRelative="c"===c;else if("s"===c||"S"===c)this.curCommandType=x.SMOOTH_CURVE_TO,this.curCommandRelative="s"===c;else if("q"===c||"Q"===c)this.curCommandType=x.QUAD_TO,this.curCommandRelative="q"===c;else if("t"===c||"T"===c)this.curCommandType=x.SMOOTH_QUAD_TO,this.curCommandRelative="t"===c;else{if("a"!==c&&"A"!==c)throw new SyntaxError('Unexpected character "'+c+'" at index '+l+".");this.curCommandType=x.ARC,this.curCommandRelative="a"===c}else e.push({type:x.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=c,this.curNumberHasDecimal="."===c}else this.curNumber+=c,this.curNumberHasDecimal=!0;else this.curNumber+=c;else this.curNumber+=c,this.curNumberHasExp=!0}return e},e.prototype.transform=function(s){return Object.create(this,{parse:{value:function(e,r){void 0===r&&(r=[]);for(var o=0,l=Object.getPrototypeOf(this).parse.call(this,e);o<l.length;o++){var c=l[o],u=s(c);Array.isArray(u)?r.push.apply(r,u):r.push(u)}return r}}})},e}(p),x=function(s){function e(r){var o=s.call(this)||this;return o.commands="string"==typeof r?e.parse(r):r,o}return l(e,s),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var s=f.CALCULATE_BOUNDS();return this.transform(s),s},e.prototype.transform=function(s){for(var e=[],r=0,o=this.commands;r<o.length;r++){var l=s(o[r]);Array.isArray(l)?e.push.apply(e,l):e.push(l)}return this.commands=e,this},e.encode=function(s){return A(s)},e.parse=function(s){var e=new E,r=[];return e.parse(s,r),e.finish(r),r},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(p),M=((O={})[x.MOVE_TO]=2,O[x.LINE_TO]=2,O[x.HORIZ_LINE_TO]=1,O[x.VERT_LINE_TO]=1,O[x.CLOSE_PATH]=0,O[x.QUAD_TO]=4,O[x.SMOOTH_QUAD_TO]=2,O[x.CURVE_TO]=6,O[x.SMOOTH_CURVE_TO]=4,O[x.ARC]=7,O),R=" ";function A(s){var e="";Array.isArray(s)||(s=[s]);for(var r=0;r<s.length;r++){var o=s[r];if(o.type===x.CLOSE_PATH)e+="z";else if(o.type===x.HORIZ_LINE_TO)e+=(o.relative?"h":"H")+o.x;else if(o.type===x.VERT_LINE_TO)e+=(o.relative?"v":"V")+o.y;else if(o.type===x.MOVE_TO)e+=(o.relative?"m":"M")+o.x+R+o.y;else if(o.type===x.LINE_TO)e+=(o.relative?"l":"L")+o.x+R+o.y;else if(o.type===x.CURVE_TO)e+=(o.relative?"c":"C")+o.x1+R+o.y1+R+o.x2+R+o.y2+R+o.x+R+o.y;else if(o.type===x.SMOOTH_CURVE_TO)e+=(o.relative?"s":"S")+o.x2+R+o.y2+R+o.x+R+o.y;else if(o.type===x.QUAD_TO)e+=(o.relative?"q":"Q")+o.x1+R+o.y1+R+o.x+R+o.y;else if(o.type===x.SMOOTH_QUAD_TO)e+=(o.relative?"t":"T")+o.x+R+o.y;else{if(o.type!==x.ARC)throw new Error('Unexpected command type "'+o.type+'" at index '+r+".");e+=(o.relative?"a":"A")+o.rX+R+o.rY+R+o.xRot+R+ +o.lArcFlag+R+ +o.sweepFlag+R+o.x+R+o.y}}return e}var N=function(s){function e(r){var o=s.call(this)||this;return o.commands="string"==typeof r?e.parse(r):r,o}return l(e,s),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var s=f.CALCULATE_BOUNDS();return this.transform(s),s},e.prototype.transform=function(s){for(var e=[],r=0,o=this.commands;r<o.length;r++){var l=s(o[r]);Array.isArray(l)?e.push.apply(e,l):e.push(l)}return this.commands=e,this},e.encode=function(s){return A(s)},e.parse=function(s){var e=new E,r=[];return e.parse(s,r),e.finish(r),r},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(p);(m={})[N.MOVE_TO]=2,m[N.LINE_TO]=2,m[N.HORIZ_LINE_TO]=1,m[N.VERT_LINE_TO]=1,m[N.CLOSE_PATH]=0,m[N.QUAD_TO]=4,m[N.SMOOTH_QUAD_TO]=2,m[N.CURVE_TO]=6,m[N.SMOOTH_CURVE_TO]=4,m[N.ARC]=7;r.d(e,"a",function(){return L});class L{constructor(){}static loadFromFileContents(s){let e=(new DOMParser).parseFromString(s,"image/svg+xml");return this.load(e)}static load(s){let e=s.querySelectorAll("path"),r={},o=[];r.points=[];for(let s of e){let e=new N(s.getAttribute("d")),l={x:0,y:0};for(let[s,c]of e.commands.entries()){switch(c.type){case N.MOVE_TO:case N.LINE_TO:r.points.push([c.x,c.y]);break;case N.HORIZ_LINE_TO:r.points.push([c.x,l.y]);break;case N.VERT_LINE_TO:r.points.push([l.x,c.y]);break;case N.CLOSE_PATH:r.closed=!0,o.push(r),(r={}).points=[]}if(s==e.commands.length-1&&c.type!=N.CLOSE_PATH){let s=r.points[0],e=r.points[r.points.length-1];Math.hypot(e.x-s.x,e.y-s.y)<.1?r.closed=!0:r.closed=!1,o.push(r),(r={}).points=[]}c.hasOwnProperty("x")&&(l.x=c.x),c.hasOwnProperty("y")&&(l.y=c.y)}}for(let s of o){s.x=s.points[0][0],s.y=s.points[0][1],s.points.push([s.x,s.y]);for(let e of s.points)e[0]-=s.x,e[1]-=s.y}return o}}},,,,,,function(s,e){s.exports='<svg xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" viewBox="0 0 900 900" version="1.1" id="svg8" sodipodi:docname="dla.svg" inkscape:version="0.92.3 (2405546, 2018-03-11)"><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 360.0972,430.72214 356.96812,456.71 347.58087,479.86521 333.41765,498.96906 315.96066,513.06641 300.90813,520.44447 284.47221,525.18747 265.76359,527.75662 243.89295,528.61302 H 209.30835 174.72376 V 430.52451 332.43599 H 210.29649 245.86922 L 268.20099,333.45707 287.23898,336.52027 303.24671,341.32917 316.48767,347.85084 334.60341,362.40932 348.37137,381.31556 357.16575,404.14142 360.0972,430.72214" id="path820"></path><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 307.79212,430.32687 306.01348,412.37583 300.67756,397.25741 291.61969,384.93871 278.41167,375.65026 270.53956,372.4553 262.46982,370.512 252.35794,369.42506 238.09592,369.06274 H 231.706 225.31609 V 430.45864 491.8545 H 231.706 238.09592 L 253.74133,491.45923 264.57783,490.27351 272.91108,487.90199 281.04669,484.21298 293.03602,474.99044 301.33632,463.13284 306.17817,448.27792 307.79212,430.32687" id="path819"></path><path inkscape:connector-curvature="0" id="path821" style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 517.15385,528.61302 H 375.65347 V 332.43599 H 426.24576 V 490.66878 H 517.15385 V 528.61302" sodipodi:nodetypes="ccccccc"></path><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 731.69898,528.61302 H 679.39389 L 665.82358,488.95599 H 593.09708 L 579.52676,528.61302 H 528.53917 L 601.00213,332.43599 H 659.23601 L 731.69898,528.61302" id="path824"></path><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 653.57075,452.988 629.46033,382.63306 605.34994,452.988 H 653.57075" id="path823"></path></svg>'},,function(s,e,r){"use strict";r.r(e);var o=r(1);class l{constructor(s,e,r){this.p5=s,this.x=e,this.y=r,this.angle=0,this.pathDiameter=800,this.angularSpeed=0,this.maxAngularSpeed=.05,this.angularAcceleration=.001,this.velocity={x:0,y:0},this.maxVelocity=5,this.acceleration=.5,this.friction=.05,this.FREE=0,this.RADIAL=1,this.movementMode=this.FREE,this.heading=0,this.movementAngle=0,this.rotationSpeed=.1,this.isBoosting=!1,this.isBraking=!1,this.isRotatingLeft=!1,this.isRotatingRight=!1,this.isShooting=!1,this.isStill=!0,this.isMovingCounterclockwise=!1,this.isMovingClockwise=!1}draw(){this.p5.fill(255),this.p5.stroke(0),this.p5.translate(this.x,this.y),this.p5.rotate(this.heading),this.p5.beginShape(),this.p5.vertex(12.5,0),this.p5.vertex(-12.5,-10),this.p5.vertex(-12.5,10),this.p5.endShape(this.p5.CLOSE)}move(){switch(this.movementMode){case this.FREE:this.isBoosting&&!this.isBraking&&this.getVelocityMagnitude()<this.maxVelocity&&(this.velocity.x+=Math.cos(this.heading)*this.acceleration,this.velocity.y+=Math.sin(this.heading)*this.acceleration,this.isStill=!1),!this.isBraking||this.isBoosting||this.isStill||(this.velocity.x>0?this.velocity.x-=this.acceleration:this.velocity.x+=this.acceleration,this.velocity.y>0?this.velocity.y-=this.acceleration:this.velocity.y+=this.acceleration),this.isBoosting||this.isBraking||this.isStill||(this.velocity.x>0?this.velocity.x-=this.friction:this.velocity.x+=this.friction,this.velocity.y>0?this.velocity.y-=this.friction:this.velocity.y+=this.friction),this.getVelocityMagnitude()<.1&&(this.velocity.x=0,this.velocity.y=0,this.isStill=!0),this.isRotatingLeft&&!this.isRotatingRight&&(this.heading-=this.rotationSpeed),this.isRotatingRight&&!this.isRotatingLeft&&(this.heading+=this.rotationSpeed),this.x+=this.velocity.x,this.y+=this.velocity.y;break;case this.RADIAL:this.isMovingClockwise&&!this.isMovingCounterclockwise&&Math.abs(this.angularSpeed)<this.maxAngularSpeed&&(this.angularSpeed+=this.angularAcceleration),!this.isMovingClockwise&&this.isMovingCounterclockwise&&Math.abs(this.angularSpeed)<this.maxAngularSpeed&&(this.angularSpeed-=this.angularAcceleration),this.isMovingClockwise||this.isMovingCounterclockwise||(this.angularSpeed>0?this.angularSpeed-=this.angularAcceleration:this.angularSpeed<0&&(this.angularSpeed+=this.angularAcceleration)),this.angle+=this.angularSpeed,this.x=window.innerWidth/2+Math.cos(this.angle)*this.pathDiameter/2,this.y=window.innerHeight/2+Math.sin(this.angle)*this.pathDiameter/2}}getVelocityMagnitude(){return Math.abs(Math.sqrt(this.velocity.x*this.velocity.x+this.velocity.y*this.velocity.y))}}var c=r(3);let u,n,y=!0;const g=0,f=1,d=2,w=3;let v=f;new p5(function(s){function e(){switch(u.removeAll(),v==g||v==d||v==w?(u.showWalkers=!0,function(s){let e=c.a.loadFromFileContents(s);for(let s of e)s.stuck=!0,s.solid=!1,s.x+=window.innerWidth/2-450,s.y+=window.innerHeight/2-450;u.createShapesFromPaths(e)}(r(9))):v==f&&(u.showWalkers=!1),v){case g:u.settings.BiasTowards="Center";break;case d:n.movementMode=n.FREE;break;case w:n.movementMode=n.RADIAL,n.x=window.innerWidth/2-400,n.y=window.innerHeight/2,n.velocity.x=0,n.velocity.y=0}}s.setup=function(){s.createCanvas(window.innerWidth,window.innerHeight),s.colorMode(s.HSB,255),s.ellipseMode(s.CENTER),n=new l(s,window.innerWidth/2,window.innerHeight/2),u=new o.a(s),e()},s.draw=function(){switch(u.iterate(),u.draw(),function(){if(y){s.fill(0),s.noStroke(),s.textSize(20),s.textStyle(s.BOLD),s.text("06 - interactivity",20,40),s.textStyle(s.NORMAL),s.fill(150),s.text("Different ways to interact with DLA\n\nKey commands:\n1 - click-to-grow mode\n2 - mouse trailer mode\n3 - Asteroids mode\n4 - radial Bust-a-Move mode",20,70);let e="";switch(v){case f:e="Click and hold to grow";break;case g:e="Click and hold to spawn walkers";break;case d:e="Use WASD to move, hold Space to shoot";break;case w:e="Use A and D to move, click to shoot"}s.text(e,20,280)}}(),v){case g:s.mouseX>=u.edges.left+20&&s.mouseX<=u.edges.right-20&&s.mouseY>=u.edges.top+20&&s.mouseY<=u.edges.bottom-20&&u.createWalker({x:s.mouseX+s.random(-20,20),y:s.mouseY+s.random(-20,20)});break;case w:s.stroke(200),s.noFill(),s.ellipse(window.innerWidth/2,window.innerHeight/2,800),n.heading=Math.atan2(s.mouseY-n.y,s.mouseX-n.x)}v!=d&&v!=w||(n.move(),n.draw(),n.isShooting&&s.frameCount%5==0&&u.createWalker({x:n.x,y:n.y,BiasTowards:{x:5e3*Math.cos(n.heading),y:5e3*Math.sin(n.heading)}}),s.mouseIsPressed||(n.isShooting=!1),n.x<u.edges.left&&(n.x=u.edges.right),n.x>u.edges.right&&(n.x=u.edges.left),n.y<u.edges.top&&(n.y=u.edges.bottom),n.y>u.edges.bottom&&(n.y=u.edges.top))},s.keyPressed=function(){switch(s.key){case"w":v==d&&(n.isBoosting=!0,n.isBraking=!1);break;case"s":v==d&&(n.isBoosting=!1,n.isBraking=!0);break;case"a":v==d?(n.isRotatingLeft=!0,n.isRotatingRight=!1):v==w&&(n.isMovingCounterclockwise=!0,n.isMovingClockwise=!1);break;case"d":v==d?(n.isRotatingLeft=!1,n.isRotatingRight=!0):v==w&&(n.isMovingCounterclockwise=!1,n.isMovingClockwise=!0);break;case" ":n.isShooting=!0}},s.keyReleased=function(){if(v==d||v==w)switch(s.key){case"w":v==d&&(n.isBoosting=!1);break;case"s":v==d&&(n.isBraking=!1);break;case"a":v==d?n.isRotatingLeft=!1:v==w&&(n.isMovingCounterclockwise=!1);break;case"d":v==d?n.isRotatingRight=!1:v==w&&(n.isMovingClockwise=!1);break;case" ":n.isShooting=!1}switch(s.key){case" ":v!=d&&v!=w&&u.togglePause();break;case"w":v!=d&&v!=w&&u.toggleShowWalkers();break;case"c":u.toggleShowClusters();break;case"r":e();break;case"f":u.toggleUseFrame(),e();break;case"l":u.toggleLineRenderingMode();break;case"e":u.export();break;case"1":v=f,e();break;case"2":v=g,e();break;case"3":v=d,e();break;case"4":v=w,e()}},s.mousePressed=function(){switch(v){case f:u.settings.CircleCenter={x:s.mouseX,y:s.mouseY},u.createDefaultWalkers(4e3,"Circle"),u.createClusterFromParams([{x:s.mouseX,y:s.mouseY}]);for(let e of u.bodies)e.BiasTowards={x:s.mouseX,y:s.mouseY};break;case w:n.isShooting=!0}},s.mouseReleased=function(){switch(v){case f:e()}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(s){var t={};function e(i){if(t[i])return t[i].exports;var h=t[i]={i:i,l:!1,exports:{}};return s[i].call(h.exports,h,h.exports,e),h.l=!0,h.exports}e.m=s,e.c=t,e.d=function(s,t,i){e.o(s,t)||Object.defineProperty(s,t,{enumerable:!0,get:i})},e.r=function(s){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},e.t=function(s,t){if(1&t&&(s=e(s)),8&t)return s;if(4&t&&"object"==typeof s&&s&&s.__esModule)return s;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:s}),2&t&&"string"!=typeof s)for(var h in s)e.d(i,h,function(t){return s[t]}.bind(null,h));return i},e.n=function(s){var t=s&&s.__esModule?function(){return s.default}:function(){return s};return e.d(t,"a",t),t},e.o=function(s,t){return Object.prototype.hasOwnProperty.call(s,t)},e.p="",e(e.s=4)}([function(s,t,e){(function(e){var i,h,l;h=[],void 0===(l="function"==typeof(i=function(){"use strict";function t(s,t,e){var i=new XMLHttpRequest;i.open("GET",s),i.responseType="blob",i.onload=function(){o(i.response,t,e)},i.onerror=function(){console.error("could not download file")},i.send()}function i(s){var t=new XMLHttpRequest;return t.open("HEAD",s,!1),t.send(),200<=t.status&&299>=t.status}function h(s){try{s.dispatchEvent(new MouseEvent("click"))}catch(e){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),s.dispatchEvent(t)}}var l="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof e&&e.global===e?e:void 0,o=l.saveAs||("object"!=typeof window||window!==l?function(){}:"download"in HTMLAnchorElement.prototype?function(s,e,o){var c=l.URL||l.webkitURL,n=document.createElement("a");e=e||s.name||"download",n.download=e,n.rel="noopener","string"==typeof s?(n.href=s,n.origin===location.origin?h(n):i(n.href)?t(s,e,o):h(n,n.target="_blank")):(n.href=c.createObjectURL(s),setTimeout(function(){c.revokeObjectURL(n.href)},4e4),setTimeout(function(){h(n)},0))}:"msSaveOrOpenBlob"in navigator?function(s,e,l){if(e=e||s.name||"download","string"!=typeof s)navigator.msSaveOrOpenBlob(function(s,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(s.type)?new Blob(["\ufeff",s],{type:s.type}):s}(s,l),e);else if(i(s))t(s,e,l);else{var o=document.createElement("a");o.href=s,o.target="_blank",setTimeout(function(){h(o)})}}:function(s,e,i,h){if((h=h||open("","_blank"))&&(h.document.title=h.document.body.innerText="downloading..."),"string"==typeof s)return t(s,e,i);var o="application/octet-stream"===s.type,c=/constructor/i.test(l.HTMLElement)||l.safari,n=/CriOS\/[\d]+/.test(navigator.userAgent);if((n||o&&c)&&"object"==typeof FileReader){var r=new FileReader;r.onloadend=function(){var s=r.result;s=n?s:s.replace(/^data:[^;]*;/,"data:attachment/file;"),h?h.location.href=s:location=s,h=null},r.readAsDataURL(s)}else{var u=l.URL||l.webkitURL,a=u.createObjectURL(s);h?h.location=a:location.href=a,h=null,setTimeout(function(){u.revokeObjectURL(a)},4e4)}});l.saveAs=o.saveAs=o,s.exports=o})?i.apply(t,h):i)||(s.exports=l)}).call(this,e(2))},function(s,t,e){"use strict";var i={CircleDiameter:5,InitialClusterType:"Random",WalkerSource:"Random",MaxWalkers:5e3,EdgeMargin:0,PruneOldWalkers:!1,MaxAge:30,ReplenishWalkers:!1,PruneDistantWalkers:!1,MaxWanderDistance:20,VaryDiameterByDistance:!1,VaryDiameterRandomly:!1,ShowClusters:!0,ShowWalkers:!0,ShowShapes:!0,BiasTowards:"",BiasForce:1,UsePerWalkerBias:!0,UseFrame:!0,FrameSize:900,CaptureLines:!0,RenderMode:"Shapes",UseStroke:!1,UseColors:!1,BackgroundColor:{h:230,s:20,b:40},WalkerColor:{h:200,s:30,b:44},ClusterColor:{h:30,s:70,b:80},ShapeColor:{h:100,s:50,b:80},LineColor:{h:10,s:70,b:100},FrameColor:{h:0,s:100,b:100}};const h=[];class l{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return h.length?h.pop():new l}static releaseBranch(s){h.push(s)}static sortBranches(s,t){return s.sort>t.sort?-1:1}}class o{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(s,t=!1){if(!t){const t=s._bvh;if(t&&t!==this)throw new Error("Body belongs to another collision system");s._bvh=this,this._bodies.push(s)}const e=s._polygon,i=s.x,h=s.y;e&&(s._dirty_coords||s.x!==s._x||s.y!==s._y||s.angle!==s._angle||s.scale_x!==s._scale_x||s.scale_y!==s._scale_y)&&s._calculateCoords();const o=s._bvh_padding,c=e?0:s.radius*s.scale,n=(e?s._min_x:i-c)-o,r=(e?s._min_y:h-c)-o,u=(e?s._max_x:i+c)+o,a=(e?s._max_y:h+c)+o;s._bvh_min_x=n,s._bvh_min_y=r,s._bvh_max_x=u,s._bvh_max_y=a;let g=this._hierarchy,b=0;if(g)for(;;){if(!g._bvh_branch){const t=g._bvh_parent,e=g._bvh_min_x,i=g._bvh_min_y,h=g._bvh_max_x,o=g._bvh_max_y,c=g._bvh_parent=s._bvh_parent=l.getBranch();c._bvh_parent=t,c._bvh_left=g,c._bvh_right=s,c._bvh_sort=b++,c._bvh_min_x=n<e?n:e,c._bvh_min_y=r<i?r:i,c._bvh_max_x=u>h?u:h,c._bvh_max_y=a>o?a:o,t?t._bvh_left===g?t._bvh_left=c:t._bvh_right=c:this._hierarchy=c;break}{const s=g._bvh_left,t=s._bvh_min_y,e=s._bvh_max_x,i=s._bvh_max_y,h=n<s._bvh_min_x?n:s._bvh_min_x,l=r<t?r:t,o=u>e?u:e,c=a>i?a:i,w=(o-h)*(c-l)-(e-s._bvh_min_x)*(i-t),k=g._bvh_right,f=k._bvh_min_x,C=k._bvh_min_y,d=k._bvh_max_x,S=k._bvh_max_y,y=n<f?n:f,F=r<C?r:C,W=u>d?u:d,M=a>S?a:S,O=(W-y)*(M-F)-(d-f)*(S-C);g._bvh_sort=b++,g._bvh_min_x=h<y?h:y,g._bvh_min_y=l<F?l:F,g._bvh_max_x=o>W?o:W,g._bvh_max_y=c>M?c:M,g=w<=O?s:k}}else this._hierarchy=s}remove(s,t=!1){if(!t){const t=s._bvh;if(t&&t!==this)throw new Error("Body belongs to another collision system");s._bvh=null,this._bodies.splice(this._bodies.indexOf(s),1)}if(this._hierarchy===s)return void(this._hierarchy=null);const e=s._bvh_parent,i=e._bvh_parent,h=e._bvh_left,o=h===s?e._bvh_right:h;if(o._bvh_parent=i,o._bvh_branch&&(o._bvh_sort=e._bvh_sort),i){i._bvh_left===e?i._bvh_left=o:i._bvh_right=o;let s=i;for(;s;){const t=s._bvh_left,e=t._bvh_min_x,i=t._bvh_min_y,h=t._bvh_max_x,l=t._bvh_max_y,o=s._bvh_right,c=o._bvh_min_x,n=o._bvh_min_y,r=o._bvh_max_x,u=o._bvh_max_y;s._bvh_min_x=e<c?e:c,s._bvh_min_y=i<n?i:n,s._bvh_max_x=h>r?h:r,s._bvh_max_y=l>u?l:u,s=s._bvh_parent}}else this._hierarchy=o;l.releaseBranch(e)}update(){const s=this._bodies,t=s.length;for(let e=0;e<t;++e){const t=s[e];let i=!1;if(i||t.padding===t._bvh_padding||(t._bvh_padding=t.padding,i=!0),!i){const s=t._polygon;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const e=t.x,h=t.y,l=s?0:t.radius*t.scale,o=s?t._min_x:e-l,c=s?t._min_y:h-l,n=s?t._max_x:e+l,r=s?t._max_y:h+l;i=o<t._bvh_min_x||c<t._bvh_min_y||n>t._bvh_max_x||r>t._bvh_max_y}i&&(this.remove(t,!0),this.insert(t,!0))}}potentials(s){const t=[],e=s._bvh_min_x,i=s._bvh_min_y,h=s._bvh_max_x,l=s._bvh_max_y;let o=this._hierarchy,c=!0;if(!o||!o._bvh_branch)return t;for(;o;){if(c){c=!1;let s=o._bvh_branch?o._bvh_left:null;for(;s&&s._bvh_max_x>=e&&s._bvh_max_y>=i&&s._bvh_min_x<=h&&s._bvh_min_y<=l;)s=(o=s)._bvh_branch?o._bvh_left:null}const n=o._bvh_branch,r=n?o._bvh_right:null;if(r&&r._bvh_max_x>e&&r._bvh_max_y>i&&r._bvh_min_x<h&&r._bvh_min_y<l)o=r,c=!0;else{n||o===s||t.push(o);let e=o._bvh_parent;if(!e)break;for(;e&&e._bvh_right===o;)e=(o=e)._bvh_parent;o=e}}return t}draw(s){const t=this._bodies,e=t.length;for(let i=0;i<e;++i)t[i].draw(s)}drawBVH(s){let t=this._hierarchy,e=!0;for(;t;){if(e){e=!1;let s=t._bvh_branch?t._bvh_left:null;for(;s;)s=(t=s)._bvh_branch?t._bvh_left:null}const i=t._bvh_branch,h=t._bvh_min_x,l=t._bvh_min_y,o=t._bvh_max_x,c=t._bvh_max_y,n=i?t._bvh_right:null;if(s.moveTo(h,l),s.lineTo(o,l),s.lineTo(o,c),s.lineTo(h,c),s.lineTo(h,l),n)t=n,e=!0;else{let s=t._bvh_parent;if(!s)break;for(;s&&s._bvh_right===t;)s=(t=s)._bvh_parent;t=s}}}}class c{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function n(s,t,e=null,i=!0){const h=s._polygon,l=t._polygon;let o=!1;return e&&(e.a=s,e.b=t,e.a_in_b=!0,e.b_in_a=!0,e.overlap=null,e.overlap_x=0,e.overlap_y=0),h&&(s._dirty_coords||s.x!==s._x||s.y!==s._y||s.angle!==s._angle||s.scale_x!==s._scale_x||s.scale_y!==s._scale_y)&&s._calculateCoords(),l&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),i&&!function(s,t){const e=s._polygon,i=e?0:s.x,h=e?0:s.y,l=e?0:s.radius*s.scale,o=e?s._min_x:i-l,c=e?s._min_y:h-l,n=e?s._max_x:i+l,r=e?s._max_y:h+l,u=t._polygon,a=u?0:t.x,g=u?0:t.y,b=u?0:t.radius*t.scale,w=u?t._min_x:a-b,k=u?t._min_y:g-b,f=u?t._max_x:a+b,C=u?t._max_y:g+b;return o<f&&c<C&&n>w&&r>k}(s,t)||(h&&s._dirty_normals&&s._calculateNormals(),l&&t._dirty_normals&&t._calculateNormals(),o=h&&l?function(s,t,e=null){const i=s._coords.length,h=t._coords.length;if(2===i&&2===h){const i=s._coords,h=t._coords;return e&&(e.overlap=0),i[0]===h[0]&&i[1]===h[1]}const l=s._coords,o=t._coords,c=s._normals,n=t._normals;if(i>2)for(let s=0,t=1;s<i;s+=2,t+=2)if(u(l,o,c[s],c[t],e))return!1;if(h>2)for(let s=0,t=1;s<h;s+=2,t+=2)if(u(l,o,n[s],n[t],e))return!1;return!0}(s,t,e):h?r(s,t,e,!1):l?r(t,s,e,!0):function(s,t,e=null){const i=s.radius*s.scale,h=t.radius*t.scale,l=t.x-s.x,o=t.y-s.y,c=i+h,n=l*l+o*o;if(n>c*c)return!1;if(e){const s=Math.sqrt(n);e.a_in_b=i<=h&&s<=h-i,e.b_in_a=h<=i&&s<=i-h,e.overlap=c-s,e.overlap_x=l/s,e.overlap_y=o/s}return!0}(s,t,e)),e&&(e.collision=o),o}function r(s,t,e=null,i=!1){const h=s._coords,l=s._edges,o=s._normals,c=t.x,n=t.y,r=t.radius*t.scale,u=2*r,a=r*r,g=h.length;let b=!0,w=!0,k=null,f=0,C=0;if(2===g){const s=c-h[0],t=n-h[1],i=s*s+t*t;if(i>a)return!1;if(e){const e=Math.sqrt(i);k=r-e,f=s/e,C=t/e,w=!1}}else for(let s=0,t=1;s<g;s+=2,t+=2){const i=c-h[s],d=n-h[t],S=l[s],y=l[t],F=i*S+d*y,W=F<0?-1:F>S*S+y*y?1:0;let M=!1,O=0,T=0,B=0;if(e&&b&&i*i+d*d>a&&(b=!1),W){const t=-1===W,o=t?0===s?g-2:s-2:s===g-2?0:s+2,u=o+1,b=c-h[o],k=n-h[u],f=l[o],C=l[u],S=b*f+k*C;if((S<0?-1:S>f*f+C*C?1:0)===-W){const s=t?i:b,h=t?d:k,l=s*s+h*h;if(l>a)return!1;if(e){const t=Math.sqrt(l);M=!0,O=r-t,T=s/t,B=h/t,w=!1}}}else{const h=o[s],l=o[t],c=i*h+d*l,n=c<0?-c:c;if(c>0&&n>r)return!1;e&&(M=!0,O=r-c,T=h,B=l,(w&&c>=0||O<u)&&(w=!1))}M&&(null===k||k>O)&&(k=O,f=T,C=B)}return e&&(e.a_in_b=i?w:b,e.b_in_a=i?b:w,e.overlap=k,e.overlap_x=i?-f:f,e.overlap_y=i?-C:C),!0}function u(s,t,e,i,h=null){const l=s.length,o=t.length;if(!l||!o)return!0;let c=null,n=null,r=null,u=null;for(let t=0,h=1;t<l;t+=2,h+=2){const l=s[t]*e+s[h]*i;(null===c||c>l)&&(c=l),(null===n||n<l)&&(n=l)}for(let s=0,h=1;s<o;s+=2,h+=2){const l=t[s]*e+t[h]*i;(null===r||r>l)&&(r=l),(null===u||u<l)&&(u=l)}if(c>u||n<r)return!0;if(h){let s=0;if(c<r)if(h.a_in_b=!1,n<u)s=n-r,h.b_in_a=!1;else{const t=n-r,e=u-c;s=t<e?t:-e}else if(h.b_in_a=!1,n>u)s=c-u,h.a_in_b=!1;else{const t=n-r,e=u-c;s=t<e?t:-e}const t=h.overlap,l=s<0?-s:s;if(null===t||t>l){const t=s<0?-1:1;h.overlap=l,h.overlap_x=e*t,h.overlap_y=i*t}}return!1}class a{constructor(s=0,t=0,e=0){this.x=s,this.y=t,this.padding=e,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=e,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(s,t=null,e=!0){return n(this,s,t,e)}potentials(){const s=this._bvh;if(null===s)throw new Error("Body does not belong to a collision system");return s.potentials(this)}remove(){const s=this._bvh;s&&s.remove(this,!1)}createResult(){return new c}static createResult(){return new c}}class g extends a{constructor(s=0,t=0,e=0,i=1,h=0){super(s,t,h),this.radius=e,this.scale=i}draw(s){const t=this.x,e=this.y,i=this.radius*this.scale;s.moveTo(t+i,e),s.arc(t,e,i,0,2*Math.PI)}}class b extends a{constructor(s=0,t=0,e=[],i=0,h=1,l=1,o=0){super(s,t,o),this.angle=i,this.scale_x=h,this.scale_y=l,this._polygon=!0,this._x=s,this._y=t,this._angle=i,this._scale_x=h,this._scale_y=l,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,b.prototype.setPoints.call(this,e)}draw(s){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const t=this._coords;if(2===t.length)s.moveTo(t[0],t[1]),s.arc(t[0],t[1],1,0,2*Math.PI);else{s.moveTo(t[0],t[1]);for(let e=2;e<t.length;e+=2)s.lineTo(t[e],t[e+1]);t.length>4&&s.lineTo(t[0],t[1])}}setPoints(s){const t=s.length;this._points=new Float64Array(2*t),this._coords=new Float64Array(2*t),this._edges=new Float64Array(2*t),this._normals=new Float64Array(2*t);const e=this._points;for(let i=0,h=0,l=1;i<t;++i,h+=2,l+=2){const t=s[i];e[h]=t[0],e[l]=t[1]}this._dirty_coords=!0}_calculateCoords(){const s=this.x,t=this.y,e=this.angle,i=this.scale_x,h=this.scale_y,l=this._points,o=this._coords,c=l.length;let n,r,u,a;for(let g=0,b=1;g<c;g+=2,b+=2){let c=l[g]*i,w=l[b]*h;if(e){const s=Math.cos(e),t=Math.sin(e),i=c;c=i*s-w*t,w=i*t+w*s}c+=s,w+=t,o[g]=c,o[b]=w,0===g?(n=r=c,u=a=w):(c<n?n=c:c>r&&(r=c),w<u?u=w:w>a&&(a=w))}this._x=s,this._y=t,this._angle=e,this._scale_x=i,this._scale_y=h,this._min_x=n,this._min_y=u,this._max_x=r,this._max_y=a,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const s=this._coords,t=this._edges,e=this._normals,i=s.length;for(let h=0,l=1;h<i;h+=2,l+=2){const o=h+2<i?h+2:0,c=s[o]-s[h],n=s[o+1]-s[l],r=c||n?Math.sqrt(c*c+n*n):0;t[h]=c,t[l]=n,e[h]=r?n/r:0,e[l]=r?-c/r:0}this._dirty_normals=!1}}class w extends b{constructor(s=0,t=0,e=0){super(s,t,[[0,0]],0,1,1,e),this._point=!0}}w.prototype.setPoints=void 0;class k{constructor(){this._bvh=new o}createCircle(s=0,t=0,e=0,i=1,h=0){const l=new g(s,t,e,i,h);return this._bvh.insert(l),l}createPolygon(s=0,t=0,e=[[0,0]],i=0,h=1,l=1,o=0){const c=new b(s,t,e,i,h,l,o);return this._bvh.insert(c),c}createPoint(s=0,t=0,e=0){const i=new w(s,t,e);return this._bvh.insert(i),i}createResult(){return new c}static createResult(){return new c}insert(...s){for(const t of s)this._bvh.insert(t,!1);return this}remove(...s){for(const t of s)this._bvh.remove(t,!1);return this}update(){return this._bvh.update(),this}draw(s){return this._bvh.draw(s)}drawBVH(s){return this._bvh.drawBVH(s)}potentials(s){return this._bvh.potentials(s)}collides(s,t,e=null,i=!0){return n(s,t,e,i)}}var f=Object.assign||function(s){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(s[i]=e[i])}return s};var C=function(s){var t=s.type,e=function(s,t){var e={};for(var i in s)t.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(s,i)&&(e[i]=s[i]);return e}(s,["type"]);switch(t){case"circle":return d(e);case"ellipse":return S(e);case"line":return y(e);case"path":return B(e);case"polygon":return D(e);case"polyline":return H(e);case"rect":return R(e);case"g":return E(e);default:throw new Error("Not a valid shape type")}},d=function(s){var t=s.cx,e=s.cy,i=s.r;return[{x:t,y:e-i,moveTo:!0},{x:t,y:e+i,curve:{type:"arc",rx:i,ry:i,sweepFlag:1}},{x:t,y:e-i,curve:{type:"arc",rx:i,ry:i,sweepFlag:1}}]},S=function(s){var t=s.cx,e=s.cy,i=s.rx,h=s.ry;return[{x:t,y:e-h,moveTo:!0},{x:t,y:e+h,curve:{type:"arc",rx:i,ry:h,sweepFlag:1}},{x:t,y:e-h,curve:{type:"arc",rx:i,ry:h,sweepFlag:1}}]},y=function(s){var t=s.x1,e=s.x2;return[{x:t,y:s.y1,moveTo:!0},{x:e,y:s.y2}]},F=/[MmLlHhVvCcSsQqTtAaZz]/g,W={A:7,C:6,H:1,L:2,M:2,Q:4,S:4,T:2,V:1,Z:0},M=["a","c","h","l","m","q","s","t","v"],O=function(s){return-1!==M.indexOf(s)},T=["xAxisRotation","largeArcFlag","sweepFlag"],B=function(s){for(var t=s.d,e=function(s){return s.match(F)}(t),i=function(s){return s.split(F).map(function(s){return s.replace(/[0-9]+-/g,function(s){return s.slice(0,-1)+" -"})}).map(function(s){return s.replace(/\.[0-9]+/g,function(s){return s+" "})}).map(function(s){return s.trim()}).filter(function(s){return s.length>0}).map(function(s){return s.split(/[ ,]+/).map(parseFloat).filter(function(s){return!isNaN(s)})})}(t),h=[],l=void 0,o=0,c=e.length;o<c;o++){var n=e[o],r=n.toUpperCase(),u=W[r],a=O(n);if(u>0)for(var g=i.shift(),b=g.length/u,w=0;w<b;w++){var k=h[h.length-1]||{x:0,y:0};switch(r){case"M":var f=(a?k.x:0)+g.shift(),C=(a?k.y:0)+g.shift();0===w?(l={x:f,y:C},h.push({x:f,y:C,moveTo:!0})):h.push({x:f,y:C});break;case"L":h.push({x:(a?k.x:0)+g.shift(),y:(a?k.y:0)+g.shift()});break;case"H":h.push({x:(a?k.x:0)+g.shift(),y:k.y});break;case"V":h.push({x:k.x,y:(a?k.y:0)+g.shift()});break;case"A":h.push({curve:{type:"arc",rx:g.shift(),ry:g.shift(),xAxisRotation:g.shift(),largeArcFlag:g.shift(),sweepFlag:g.shift()},x:(a?k.x:0)+g.shift(),y:(a?k.y:0)+g.shift()});var d=!0,S=!1,y=void 0;try{for(var M,B=T[Symbol.iterator]();!(d=(M=B.next()).done);d=!0){var D=M.value;0===h[h.length-1].curve[D]&&delete h[h.length-1].curve[D]}}catch(s){S=!0,y=s}finally{try{!d&&B.return&&B.return()}finally{if(S)throw y}}break;case"C":h.push({curve:{type:"cubic",x1:(a?k.x:0)+g.shift(),y1:(a?k.y:0)+g.shift(),x2:(a?k.x:0)+g.shift(),y2:(a?k.y:0)+g.shift()},x:(a?k.x:0)+g.shift(),y:(a?k.y:0)+g.shift()});break;case"S":var H=(a?k.x:0)+g.shift(),z=(a?k.y:0)+g.shift(),R=(a?k.x:0)+g.shift(),U=(a?k.y:0)+g.shift(),L={},E=void 0,j=void 0;k.curve&&"cubic"===k.curve.type?(L.x=Math.abs(k.x-k.curve.x2),L.y=Math.abs(k.y-k.curve.y2),E=k.x<k.curve.x2?k.x-L.x:k.x+L.x,j=k.y<k.curve.y2?k.y-L.y:k.y+L.y):(L.x=Math.abs(R-H),L.y=Math.abs(U-z),E=k.x,j=k.y),h.push({curve:{type:"cubic",x1:E,y1:j,x2:H,y2:z},x:R,y:U});break;case"Q":h.push({curve:{type:"quadratic",x1:(a?k.x:0)+g.shift(),y1:(a?k.y:0)+g.shift()},x:(a?k.x:0)+g.shift(),y:(a?k.y:0)+g.shift()});break;case"T":var A=(a?k.x:0)+g.shift(),V=(a?k.y:0)+g.shift(),v=void 0,G=void 0;if(k.curve&&"quadratic"===k.curve.type){var Q={x:Math.abs(k.x-k.curve.x1),y:Math.abs(k.y-k.curve.y1)};v=k.x<k.curve.x1?k.x-Q.x:k.x+Q.x,G=k.y<k.curve.y1?k.y-Q.y:k.y+Q.y}else v=k.x,G=k.y;h.push({curve:{type:"quadratic",x1:v,y1:G},x:A,y:V})}}else{var Z=h[h.length-1]||{x:0,y:0};Z.x===l.x&&Z.y===l.y||h.push({x:l.x,y:l.y})}}return h},D=function(s){var t=s.points;return z({closed:!0,points:t})},H=function(s){var t=s.points;return z({closed:!1,points:t})},z=function(s){var t=s.closed,e=s.points.split(/[\s,]+/).map(function(s){return parseFloat(s)}).reduce(function(s,t,e){return e%2==0?s.push({x:t}):s[(e-1)/2].y=t,s},[]);return t&&e.push(f({},e[0])),e[0].moveTo=!0,e},R=function(s){var t=s.height,e=s.rx,i=s.ry,h=s.width,l=s.x,o=s.y;return e||i?L({height:t,rx:e||i,ry:i||e,width:h,x:l,y:o}):U({height:t,width:h,x:l,y:o})},U=function(s){var t=s.height,e=s.width,i=s.x,h=s.y;return[{x:i,y:h,moveTo:!0},{x:i+e,y:h},{x:i+e,y:h+t},{x:i,y:h+t},{x:i,y:h}]},L=function(s){var t=s.height,e=s.rx,i=s.ry,h=s.width,l=s.x,o=s.y,c={type:"arc",rx:e,ry:i,sweepFlag:1};return[{x:l+e,y:o,moveTo:!0},{x:l+h-e,y:o},{x:l+h,y:o+i,curve:c},{x:l+h,y:o+t-i},{x:l+h-e,y:o+t,curve:c},{x:l+e,y:o+t},{x:l,y:o+t-i,curve:c},{x:l,y:o+i},{x:l+e,y:o,curve:c}]},E=function(s){return s.shapes.map(function(s){return C(s)})},j=C,A=function(s){var t="",e=0,i=void 0,h=!0,l=!1,o=void 0;try{for(var c,n=s[Symbol.iterator]();!(h=(c=n.next()).done);h=!0){var r=c.value,u=r.curve,a=void 0!==u&&u,g=r.moveTo,b=r.x,w=r.y,k=0===e||g,f=e===s.length-1||s[e+1].moveTo,C=0===e?null:s[e-1];if(k)i=r,f||(t+="M"+b+","+w);else if(a){switch(a.type){case"arc":var d=r.curve,S=d.largeArcFlag,y=void 0===S?0:S,F=d.rx,W=d.ry,M=d.sweepFlag,O=void 0===M?0:M,T=d.xAxisRotation;t+="A"+F+","+W+","+(void 0===T?0:T)+","+y+","+O+","+b+","+w;break;case"cubic":var B=r.curve;t+="C"+B.x1+","+B.y1+","+B.x2+","+B.y2+","+b+","+w;break;case"quadratic":var D=r.curve;t+="Q"+D.x1+","+D.y1+","+b+","+w}f&&b===i.x&&w===i.y&&(t+="Z")}else f&&b===i.x&&w===i.y?t+="Z":b!==C.x&&w!==C.y?t+="L"+b+","+w:b!==C.x?t+="H"+b:w!==C.y&&(t+="V"+w);e++}}catch(s){l=!0,o=s}finally{try{!h&&n.return&&n.return()}finally{if(l)throw o}}return t},V=function(s){var t=Array.isArray(s),e=t?Array.isArray(s[0]):"g"===s.type,i=t?s:e?s.shapes.map(function(s){return j(s)}):j(s);return e?i.map(function(s){return A(s)}):A(i)},v=("function"==typeof Symbol&&Symbol.iterator,e(0));e.d(t,"a",function(){return G});class G{constructor(s,t){this.p5=s,this.settings=Object.assign({},i,t),this.paused=!1,this.showWalkers=this.settings.ShowWalkers,this.showClusters=this.settings.ShowClusters,this.showShapes=this.settings.ShowShapes,this.useFrame=this.settings.UseFrame,this.renderMode=this.settings.RenderMode,this.numWalkers=0,this.customMovementFunction=void 0,this.edgeMargin=this.settings.EdgeMargin,this.edges={},this.frame={},"number"==typeof this.settings.FrameSize?(this.frame.left=window.innerWidth/2-this.settings.FrameSize/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize/2):"object"==typeof this.settings.FrameSize&&(this.frame.left=window.innerWidth/2-this.settings.FrameSize[0]/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize[0]/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize[1]/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize[1]/2),this.resetEdges(),this.maxDistance=this.p5.dist(this.edges.left,this.edges.top,window.innerWidth/2,window.innerHeight/2),this.system=new k,this.bodies=[],this.shapes=[],this.lines=[]}iterate(){this.paused||(this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createDefaultWalkers(this.settings.MaxWalkers-this.numWalkers,this.settings.ReplenishmentSource),this.moveWalkers(),this.system.update(),this.handleCollisions(),this.pruneWalkers())}draw(){if(this.settings.UseColors?this.p5.background(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.background(255),this.showShapes)for(let s of this.shapes){this.settings.UseColors?(this.p5.fill(this.getColorStringFromObject(this.settings.ShapeColor)),this.p5.stroke(this.getColorStringFromObject(this.settings.ShapeColor))):(this.p5.noFill(),this.p5.stroke(100)),this.p5.beginShape();for(let t=0;t<s._coords.length;t+=2)this.p5.vertex(s._coords[t],s._coords[t+1]);this.p5.endShape()}if("Lines"==this.renderMode){if(this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.LineColor)):this.p5.stroke(75),this.lines.length>0)for(let s of this.lines)this.p5.line(s.p1.x,s.p1.y,s.p2.x,s.p2.y)}else for(let s of this.bodies)if(s._point)this.p5.noFill(),s.stuck&&this.showClusters?(this.p5.noStroke(),this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(200),this.p5.ellipse(s.x,s.y,5)):!s.stuck&&this.showWalkers?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.stroke(0):this.p5.noStroke(),this.p5.point(s.x,s.y);else if(s._circle)this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),s.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!s.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.ellipse(s.x,s.y,2*s.radius);else if(s._polygon){this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),s.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!s.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.beginShape();for(let t=0;t<s._coords.length-1;t+=2)this.p5.vertex(s._coords[t],s._coords[t+1]);this.p5.endShape()}this.useFrame&&this.drawFrame()}drawFrame(){this.p5.noFill(),this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.FrameColor)):this.p5.stroke(0),"number"==typeof this.settings.FrameSize?this.p5.rect(window.innerWidth/2-this.settings.FrameSize/2-1,window.innerHeight/2-this.settings.FrameSize/2-1,this.settings.FrameSize+2,this.settings.FrameSize+2):"object"==typeof this.settings.FrameSize&&this.p5.rect(window.innerWidth/2-this.settings.FrameSize[0]/2-1,window.innerHeight/2-this.settings.FrameSize[1]/2-1,this.settings.FrameSize[0]+2,this.settings.FrameSize[1]+2)}resetEdges(){this.edges.left=this.useFrame?this.frame.left:0,this.edges.right=this.useFrame?this.frame.right:window.innerWidth,this.edges.top=this.useFrame?this.frame.top:0,this.edges.bottom=this.useFrame?this.frame.bottom:window.innerHeight}moveWalkers(){if(this.bodies.length>0)for(let s of this.bodies)if(!s.stuck){let t,e=this.p5.random(-1,1),i=this.p5.random(-1,1);if(this.settings.UsePerWalkerBias&&s.hasOwnProperty("BiasTowards"))e+=(t=this.getDeltasTowards(s.x,s.y,s.BiasTowards.x,s.BiasTowards.y)).x,i+=t.y;else switch(this.settings.BiasTowards){case"Top":i-=this.settings.BiasForce;break;case"Bottom":i+=this.settings.BiasForce;break;case"Left":e-=this.settings.BiasForce;break;case"Right":e+=this.settings.BiasForce;break;case"Center":e+=(t=this.getDeltasTowards(s.x,s.y,window.innerWidth/2,window.innerHeight/2)).x,i+=t.y;break;case"Edges":e-=(t=this.getDeltasTowards(s.x,s.y,window.innerWidth/2,window.innerHeight/2)).x,i-=t.y;break;case"Equator":s.y<window.innerHeight/2?i+=this.settings.BiasForce:i-=this.settings.BiasForce;break;case"Meridian":s.x<window.innerWidth/2?e+=this.settings.BiasForce:e-=this.settings.BiasForce}if(null!=typeof this.customMovementFunction&&this.customMovementFunction instanceof Function){let t=this.customMovementFunction(s);e+=t.dx,i+=t.dy}s._point&&(e=Math.round(e),i=Math.round(i)),s.x+=e,s.y+=i,s.age++}}getDeltasTowards(s,t,e,i){let h=Math.atan2(i-t,e-s);return{x:Math.cos(h)*this.settings.BiasForce,y:Math.sin(h)*this.settings.BiasForce}}handleCollisions(){for(let s of this.shapes){const t=s.potentials();for(let e of t)s.collides(e)&&(e.stuck=!0,this.numWalkers--)}for(let s of this.bodies){if(s.stuck)continue;const t=s.potentials();for(let e of t)s._point?e.stuck&&(s.stuck=!0,this.numWalkers--):e.stuck&&s.collides(e)&&(s.stuck=!0,this.numWalkers--,this.settings.CaptureLines&&this.lines.push({p1:{x:s.x,y:s.y},p2:{x:e.x,y:e.y}}))}}pruneWalkers(){if(this.settings.PruneOldWalkers||this.settings.PruneDistantWalkers)for(let[s,t]of this.bodies.entries())!t.stuck&&(this.settings.PruneOldWalkers&&t.age>this.settings.MaxAge||this.settings.PruneDistantWalkers&&this.p5.dist(t.x,t.y,t.originalX,t.originalY)>this.settings.MaxWanderDistance)&&(t.remove(),this.bodies.splice(s,1),this.numWalkers--)}createParticle(s){if(void 0===s||"object"!=typeof s)return;let t;if(s.hasOwnProperty("type"))switch(s.type){case"Point":(t=this.system.createPoint(Math.round(s.x),Math.round(s.y)))._point=!0;break;case"Circle":default:(t=this.system.createCircle(s.x,s.y,s.diameter/2))._circle=!0;break;case"Polygon":(t=this.system.createPolygon(s.x,s.y,s.polygon,s.hasOwnProperty("rotation")?this.p5.radians(s.rotation):0))._polygon=!0}else{const e=s.hasOwnProperty("diameter")?s.diameter:this.settings.CircleDiameter;(t=this.system.createCircle(s.x,s.y,e/2))._circle=!0}t.stuck=!!s.hasOwnProperty("stuck")&&s.stuck,t.age=0,s.hasOwnProperty("BiasTowards")&&(t.BiasTowards=s.BiasTowards),t.originalX=t.x,t.originalY=t.y,this.bodies.push(t)}createWalker(s){this.createParticle(s),this.numWalkers++}createDefaultWalkers(s=this.settings.MaxWalkers,t=this.settings.WalkerSource){for(let e=0;e<s;e++){let s={};switch(t){case"Edges":switch(Math.round(this.p5.random(1,4))){case 1:s.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),s.y=this.p5.random(this.edges.top,this.edges.top+this.edgeMargin);break;case 3:s.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),s.y=this.p5.random(this.edges.bottom-this.edgeMargin,this.edges.bottom);break;case 4:s.x=this.p5.random(this.edges.left,this.edges.left+this.edgeMargin),s.y=this.p5.random(this.edges.top,this.edges.bottom);break;case 2:s.x=this.p5.random(this.edges.right-this.edgeMargin,this.edges.right),s.y=this.p5.random(this.edges.top,this.edges.bottom)}break;case"Circle":let e;switch(typeof this.settings.FrameSize){case"number":e=this.settings.FrameSize/2;break;case"object":e=this.settings.FrameSize[0]>this.settings.FrameSize[1]?this.settings.FrameSize[1]/2:this.settings.FrameSize[0]/2}let i=this.p5.random(5,e),h=this.p5.random(360),l=this.settings.hasOwnProperty("CircleCenter")?this.settings.CircleCenter:{x:window.innerWidth/2,y:window.innerHeight/2};s.x=l.x+i*Math.cos(h*Math.PI/180),s.y=l.y+i*Math.sin(h*Math.PI/180);break;case"Random":s.x=this.p5.random(this.edges.left,this.edges.right),s.y=this.p5.random(this.edges.top,this.edges.bottom);break;case"Center":s.x=window.innerWidth/2,s.y=window.innerHeight/2;break;case"Offscreen":if(s.x=this.p5.random(this.edges.left-200,this.edges.right+200),s.y=this.p5.random(this.edges.top-200,this.edges.bottom+200),s.x>this.edges.left&&s.x<this.edges.right&&s.y>this.edges.top&&s.y<this.edges.bottom)continue}if(this.settings.VaryDiameterByDistance){let t=this.p5.dist(s.x,s.y,window.innerWidth/2,window.innerHeight/2);s.diameter=this.p5.map(t,0,this.maxDistance,this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1])}else this.settings.VaryDiameterRandomly&&(s.diameter=this.p5.random(this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1]));this.createWalker(s)}}createDefaultClusters(s=this.settings.InitialClusterType){let t=[];switch(s){case"Point":t.push({x:window.innerWidth/2,y:window.innerHeight/2,diameter:this.settings.CircleDiameter});break;case"Ring":let e=100,i=20;for(let s=0;s<i;s++)t.push({x:window.innerWidth/2+e*Math.cos(360/i*s*Math.PI/180),y:window.innerHeight/2+e*Math.sin(360/i*s*Math.PI/180),diameter:this.settings.CircleDiameter});break;case"Random":for(let s=0;s<100;s++)t.push({x:this.p5.random(this.edges.left,this.edges.right),y:this.p5.random(this.edges.top,this.edges.bottom),diameter:this.settings.CircleDiameter});break;case"Wall":switch(this.settings.BiasTowards){case"Top":t=this.createHorizontalClusterWall(this.edges.top);break;case"Bottom":t=this.createHorizontalClusterWall(this.edges.bottom);break;case"Left":t=this.createVerticalClusterWall(this.edges.left);break;case"Right":t=this.createVerticalClusterWall(this.edges.right);break;case"Edges":t=(t=(t=(t=t.concat(this.createHorizontalClusterWall(this.edges.top))).concat(this.createHorizontalClusterWall(this.edges.bottom))).concat(this.createVerticalClusterWall(this.edges.left))).concat(this.createVerticalClusterWall(this.edges.right));break;case"Equator":t=t.concat(this.createHorizontalClusterWall(window.innerHeight/2));break;case"Meridian":t=t.concat(this.createVerticalClusterWall(window.innerWidth/2))}}this.createClusterFromParams(t)}createHorizontalClusterWall(s){let t=[],e=this.useFrame?this.edges.right-this.edges.left:window.innerWidth;for(let i=0;i<=e/this.settings.CircleDiameter;i++)t.push({x:this.edges.left+i*this.settings.CircleDiameter,y:s,diameter:this.settings.CircleDiameter});return t}createVerticalClusterWall(s){let t=[],e=this.useFrame?this.edges.bottom-this.edges.top:window.innerHeight;for(let i=0;i<=e/this.settings.CircleDiameter;i++)t.push({x:s,y:this.edges.top+i*this.settings.CircleDiameter,diameter:this.settings.CircleDiameter});return t}createClusterFromParams(s){if(s.length>0)for(let t of s)t.stuck=!0,this.createParticle(t)}createShapesFromPaths(s){if(s.hasOwnProperty("points")||0!=s.length)for(let t of s)if(t.solid){let s=this.system.createPolygon(t.x,t.y,t.points);s.solid=t.solid,s.closed=t.closed,this.shapes.push(s)}else for(let s=1;s<t.points.length;s++){let e=this.system.createPolygon(t.x,t.y,[[t.points[s-1][0],t.points[s-1][1]],[t.points[s][0],t.points[s][1]]]);e.solid=!1,e.closed=!1,this.shapes.push(e)}else console.error("Unable to create shapes. Paths must have an array of points [[x,y],...]")}removeAll(){for(let s of this.bodies)this.system.remove(s);for(let s of this.shapes)this.system.remove(s);this.bodies=[],this.shapes=[],this.lines=[],this.numWalkers=0}togglePause(){this.paused=!this.paused}toggleShowWalkers(){this.showWalkers=!this.showWalkers}toggleShowClusters(){this.showClusters=!this.showClusters}toggleShowShapes(){this.showShapes=!this.showShapes}toggleUseFrame(){this.useFrame=!this.useFrame,this.resetEdges()}toggleLineRenderingMode(){"Lines"!=this.renderMode?this.settings.CaptureLines?this.renderMode="Lines":console.error("Line rendering mode only allowed when CaptureLines is set."):this.renderMode="Shapes"}pause(){this.paused=!0}unpause(){this.paused=!1}getColorStringFromObject(s){return"hsla("+s.h+", "+s.s+"%, "+s.b+"%, "+s.a+")"}export(){let s=document.createElement("svg");switch(s.setAttribute("xmlns","http://www.w3.org/2000/svg"),s.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),s.setAttribute("width",window.innerWidth),s.setAttribute("height",window.innerHeight),s.setAttribute("viewBox","0 0 "+window.innerWidth+" "+window.innerHeight),this.renderMode){case"Shapes":default:for(let t of this.bodies)(t.stuck||this.showWalkers)&&(t._circle?s.appendChild(this.createCircleElFromBody(t)):s.appendChild(this.createPathElFromPoints(this.getPointsFromCoords(t._coords))));break;case"Lines":if(this.lines.length>0)for(let t of this.lines){let e=[];e.push({x:t.p1.x,y:t.p1.y}),e.push({x:t.p2.x,y:t.p2.y}),s.appendChild(this.createPathElFromPoints(e))}}if(this.shapes.length>0)for(let t of this.shapes)s.appendChild(this.createPathElFromPoints(this.getPointsFromCoords(t._coords)));let t=document.implementation.createDocumentType("svg","-//W3C//DTD SVG 1.1//EN","http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"),e=document.implementation.createDocument("http://www.w3.org/2000/svg","svg",t);e.replaceChild(s,e.documentElement);let i=(new XMLSerializer).serializeToString(e),h=new Blob([i.replace(/></g,">\n\r<")]);Object(v.saveAs)(h,"dla-"+Date.now()+".svg")}getPointsFromCoords(s){let t=[];for(let e=0;e<s.length-1;e+=2)t.push({x:s[e],y:s[e+1]});return t}createPathElFromPoints(s){let t="";for(let[e,i]of s.entries())t+=i.x+","+i.y,e<s.length-1&&(t+=" ");let e=V({type:"polyline",points:t}),i=document.createElement("path");return i.setAttribute("d",e),i.setAttribute("style","fill: none; stroke: black; stroke-width: 1"),i}createCircleElFromBody(s){let t=document.createElement("circle");return t.setAttribute("cx",s.x),t.setAttribute("cy",s.y),t.setAttribute("r",s.radius),t}}},function(s,t){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(s){"object"==typeof window&&(e=window)}s.exports=e},,function(s,t,e){"use strict";e.r(t);var i=e(1);let h,l=!0;new p5(function(s){function t(){h.removeAll(),h.createDefaultWalkers(),h.createDefaultClusters()}s.setup=function(){s.createCanvas(window.innerWidth,window.innerHeight),s.colorMode(s.HSB,255),s.ellipseMode(s.CENTER),h=new i.a(s),t()},s.draw=function(){h.iterate(),h.draw(),l&&(s.fill(0),s.noStroke(),s.textSize(20),s.textStyle(s.BOLD),s.text("01 - basic DLA",20,40),s.textStyle(s.NORMAL),s.fill(150),s.text("Simplest possible configuration",20,70))},s.keyReleased=function(){switch(s.key){case" ":h.togglePause();break;case"w":h.toggleShowWalkers();break;case"c":h.toggleShowClusters();break;case"r":t();break;case"f":h.toggleUseFrame(),t();break;case"l":h.toggleLineRenderingMode();break;case"e":h.export();break;case"t":l=!l}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,